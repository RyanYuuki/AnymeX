name: Notify Release

on:
  workflow_run:
    workflows:
      - "changelog"
    types:
      - completed
  workflow_dispatch:

jobs:
  notify:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install jq
        run: sudo apt-get install -y jq

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests jq
          
      - name: Fetch Repository Tags by Date and Time
        id: fetch_tags
        run: |
          curl -s "https://api.github.com/repos/RyanYuuki/AnymeX/tags" -o tags.json
          TAGS=$(jq -r '.[].name' tags.json)
          declare -a TAGS_WITH_DATES=()
          for TAG in $TAGS; do
            TAG_DETAILS=$(curl -s "https://api.github.com/repos/RyanYuuki/AnymeX/git/refs/tags/$TAG")
            OBJECT_URL=$(echo "$TAG_DETAILS" | jq -r '.object.url // empty')
            if [ -n "$OBJECT_URL" ]; then
              OBJECT_DETAILS=$(curl -s "$OBJECT_URL")
              DATE=$(echo "$OBJECT_DETAILS" | jq -r '.tagger.date // .committer.date // empty')
              if [ -n "$DATE" ]; then
                TAGS_WITH_DATES+=("$DATE $TAG")
              fi
            fi
          done
          LATEST_TAG=""
          LATEST_DATE=""
          for TAG_DATE in "${TAGS_WITH_DATES[@]}"; do
            TAG_DATE_TIME=$(echo "$TAG_DATE" | awk '{print $1}')
            TAG_NAME=$(echo "$TAG_DATE" | awk '{print $2}')
            if [[ -z "$LATEST_DATE" || "$TAG_DATE_TIME" > "$LATEST_DATE" ]]; then
              LATEST_DATE="$TAG_DATE_TIME"
              LATEST_TAG="$TAG_NAME"
            fi
          done
          echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_ENV
          
      - name: Use the Latest Tag
        run: |
         echo "The latest tag is: ${{ env.LATEST_TAG }}"
         
      - name: Get Release Info
        id: release_info
        run: |
          curl -s "https://api.github.com/repos/RyanYuuki/AnymeX/releases/tags/${{ env.LATEST_TAG }}" -o release.json
          RELEASE_NAME=$(jq -r '.name // "No release name"' release.json)
          RELEASE_NOTES=$(jq -r '.body // "No release notes"' release.json)
          echo "RELEASE_NAME=$RELEASE_NAME" >> $GITHUB_ENV
          echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
          echo "$RELEASE_NOTES" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          
      - name: Format Release Notes
        id: format_notes
        run: |
          formatted_notes=""
          commit_counter=0
          more_commits=false
          
          while IFS= read -r line; do
            if [[ "$line" == "### "* ]]; then
              if [[ "$commit_counter" -gt 5 ]]; then
                formatted_notes+="> And $((commit_counter - 5)) more\n\n"
              fi
              formatted_notes+="\n$line\n"
              commit_counter=0
              more_commits=false
            elif [[ "$line" == "*"* ]]; then
              commit_counter=$((commit_counter + 1))
              if [[ "$commit_counter" -le 5 ]]; then
                formatted_notes+="$line\n"
              else
                more_commits=true
              fi
            fi
          done <<< "$RELEASE_NOTES"
          
          if [[ "$commit_counter" -gt 5 && "$more_commits" == "true" ]]; then
            formatted_notes+="> And $((commit_counter - 5)) more\n\n"
          fi
          
          echo "FORMATTED_NOTES<<EOF" >> $GITHUB_ENV
          echo -e "$formatted_notes" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          
      - name: Debug Release Notes
        run: |
          echo "Raw release JSON:"
          cat release.json
          echo "Extracted release notes:"
          jq -r '.body' release.json

      - name: Get and Categorize Assets with Sizes
        id: categorize_assets
        run: |
          # Fetch release assets based on the latest tag
          curl -s "https://api.github.com/repos/RyanYuuki/AnymeX/releases/tags/${{ env.LATEST_TAG }}" -o release.json
          
          # Initialize environment variables
          for VAR in apk_arm64 apk_armeabi apk_universal apk_x86_64 windows linux ios setup macos; do
            echo "${VAR}_message=" >> $GITHUB_ENV
          done
          # Process each asset
          jq -r '.assets[] | "\(.browser_download_url) \(.size)"' release.json | while read -r LINE; do
            ASSET_URL=$(echo "$LINE" | awk '{print $1}')
            ASSET_SIZE=$(echo "$LINE" | awk '{print $2}')
            SIZE_HR=$(awk -v size="$ASSET_SIZE" 'BEGIN{
              split("B KB MB GB TB", unit);
              for (i=1; size>=1024 && i<5; i++) size/=1024;
              printf "%.2f %s", size, unit[i]
            }')
            FILE_NAME=$(basename "$ASSET_URL")
            # Categorize and set variables
            if [[ "$FILE_NAME" == *"-arm64.apk" ]]; then
              echo "apk_arm64_message=[Download]($ASSET_URL) | $SIZE_HR" >> $GITHUB_ENV
            elif [[ "$FILE_NAME" == *"-armeabi-v7a.apk" ]]; then
              echo "apk_armeabi_message=[Download]($ASSET_URL) | $SIZE_HR" >> $GITHUB_ENV
            elif [[ "$FILE_NAME" == *"-universal.apk" ]]; then
              echo "apk_universal_message=[Download]($ASSET_URL) | $SIZE_HR" >> $GITHUB_ENV
            elif [[ "$FILE_NAME" == *"-x86_64.apk" ]]; then
              echo "apk_x86_64_message=[Download]($ASSET_URL) | $SIZE_HR" >> $GITHUB_ENV
            elif [[ "$FILE_NAME" == *.ipa ]]; then
              echo "ios_message=[Download]($ASSET_URL) | $SIZE_HR" >> $GITHUB_ENV
            elif [[ "$FILE_NAME" == *"Linux.AppImage" ]]; then
              echo "linuximg_message=[Download]($ASSET_URL) | $SIZE_HR" >> $GITHUB_ENV
            elif [[ "$FILE_NAME" == *"Linux.zip" ]]; then
              echo "linux_message=[Download]($ASSET_URL) | $SIZE_HR" >> $GITHUB_ENV
            elif [[ "$FILE_NAME" == *"Installer.exe" ]]; then
              echo "setup_message=[Download]($ASSET_URL) | $SIZE_HR" >> $GITHUB_ENV
            elif [[ "$FILE_NAME" == *"Windows.zip" ]]; then
              echo "windows_message=[Download]($ASSET_URL) | $SIZE_HR" >> $GITHUB_ENV
            elif [[ "$FILE_NAME" == *".dmg" ]]; then
              echo "macos_message=[Download]($ASSET_URL) | $SIZE_HR" >> $GITHUB_ENV
            fi
          done
          
      - name: Determine Webhook
        id: determine_webhook
        run: |
          if [[ "${{ env.RELEASE_NAME }}" == *"alpha"* ]]; then
            echo "DISCORD_WEBHOOK_URL=${{ secrets.DISCORD_WEBHOOK_ALPHA }}" >> $GITHUB_ENV
          else
            echo "DISCORD_WEBHOOK_URL=${{ secrets.DISCORD_WEBHOOK_BETA }}" >> $GITHUB_ENV
          fi
      - name: Send Release Notes to Telegram
        run: |
        
          # Replace ### with **Heading**
          commit=$(echo "${{ env.FORMATTED_NOTES }}" | sed -E 's/^###[[:space:]]*(.*)$/\*\*\1\*\*/g')

          # Remove extra blank lines (or lines with only spaces), keeping only one
          commit=$(echo "$commit" | awk 'BEGIN {prev=""} {if (NF == 0) {if (prev != "") print ""; prev=""} else {print; prev=$0}}')

          commit=$(echo "$commit" | sed 's/^* /üîπ /g')
          commit=$(echo "$commit" | sed 's/^> /üîπ /g')

          # Replace "):" with ") :"
          tel_commit=$(echo "$commit" | sed -E 's/\): [^:]+:/) :/g')
        
          MESSAGE="**üöÄ New Release: ${{ env.RELEASE_NAME }}**
          ${tel_commit}

          [‚ùìDon't know which version to download? Click here!](https://github.com/RyanYuuki/AnymeX/blob/main/INSTALLATION.md)**  
          
          [üìå Full changelog](https://github.com/RyanYuuki/AnymeX/releases/tag/${{ env.LATEST_TAG }})"
          echo "Telegram Message: $MESSAGE"
          curl -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -H "Content-Type: application/json" \
            -d @<(jq -n --arg text "$MESSAGE" --arg chat_id "${{ secrets.TELEGRAM_CHAT_ID }}" \
            '{ "chat_id": $chat_id, "text": $text, "parse_mode": "Markdown", "disable_web_page_preview": true }')

      - name: Send Assets to Telegram
        run: |
          MESSAGE="üéâ *${{ env.LATEST_TAG }} Released* üéâ
          
            üîπ ${{ env.apk_arm64_message }} | **APK (arm64)**
            üîπ ${{ env.apk_armeabi_message }} | **APK (armeabi-v7a)**
            üîπ ${{ env.apk_universal_message }} | **APK (universal)**
            üîπ ${{ env.apk_x86_64_message }} | **APK (x86 & x64)**
            üîπ ${{ env.windows_message }} | **Windows Zip**
            üîπ ${{ env.setup_message }} | **Windows EXE**
            üîπ ${{ env.linuximg_message }} | **Linux appimage**
            üîπ ${{ env.linux_message }} | **Linux**
            üîπ ${{ env.ios_message }} | **iOS**
            üîπ ${{ env.macos_message }} | **macOS**"
          curl -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -H "Content-Type: application/json" \
            -d '{
              "chat_id": "${{ secrets.TELEGRAM_CHAT_ID }}",
              "text": "'"$MESSAGE"'",
              "parse_mode": "Markdown"
            }'

      - name: Send Release Notes to Discord
        run: |
          formatted_notes=$(echo "${{ env.FORMATTED_NOTES }}" | sed -E 's/^### (.*)$/\*\*\1\*\*/g')
          # Remove extra blank lines (or lines with only spaces), keeping only one
          formatted_notes=$(echo "$formatted_notes" | awk 'BEGIN {prev=""} {if (NF == 0) {if (prev != "") print ""; prev=""} else {print; prev=$0}}')
          # Replace "): <text>" with ") : <text>" and format list items
          
          formatted_notes=$(echo "$formatted_notes" | \
          sed -E 's/\): [^:]+:/)/g' | \
          sed -E 's/^\* /> /g')

          
          PAYLOAD=$(jq -n \
            --arg title "üöÄ New Release: ${{ env.RELEASE_NAME }}" \
            --arg description "${formatted_notes}

            [‚ùìDon't know which version to download? Click here!](https://github.com/RyanYuuki/AnymeX/blob/main/INSTALLATION.md)  
            
            [üìå Full changelog](https://github.com/RyanYuuki/AnymeX/releases/tag/${{ env.LATEST_TAG }})" \
            --argjson color 5814783 \
            '{ "embeds": [{ "title": $title, "description": $description, "color": $color }] }')
          curl -X POST "${{ env.DISCORD_WEBHOOK_URL }}" \
            -H "Content-Type: application/json" \
            -d "$PAYLOAD"

      - name: Send Assets to Discord
        run: |
          MESSAGE="${{ env.LATEST_TAG }} Released
            üîπ ${{ env.apk_arm64_message }} | **APK (arm64)**
            üîπ ${{ env.apk_armeabi_message }} | **APK (armeabi-v7a)**
            üîπ ${{ env.apk_universal_message }} | **APK (universal)**
            üîπ ${{ env.apk_x86_64_message }} | **APK (x86 & x64)**
            üîπ ${{ env.windows_message }} | **Windows Zip**
            üîπ ${{ env.setup_message }} | **Windows EXE**
            üîπ ${{ env.linuximg_message }} | **Linux appimage**
            üîπ ${{ env.linux_message }} | **Linux**
            üîπ ${{ env.ios_message }} | **iOS**
            üîπ ${{ env.macos_message }} | **macOS**"
          PAYLOAD=$(jq -n --arg content "$MESSAGE" '{ content: $content }')
          curl -X POST "${{ env.DISCORD_WEBHOOK_URL }}" \
            -H "Content-Type: application/json" \
            -d "$PAYLOAD"
