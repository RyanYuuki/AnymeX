name: Build (Beta)

on:
  push:
    branches:
      - beta
  workflow_dispatch:

jobs:
  build-android:
    if: contains(github.event.head_commit.message, '[build]')
    runs-on: ubuntu-latest
    outputs:
      arm64_link: ${{ steps.gdriveUpload_arm64.outputs.web-content-link }}
      armeabi_link: ${{ steps.gdriveUpload_armeabi.outputs.web-content-link }}
      x86_link: ${{ steps.gdriveUpload_x86.outputs.web-content-link }}
      universal_link: ${{ steps.gdriveUpload_universal.outputs.web-content-link }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: "adopt"
          java-version: "17"

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.24.0"

      - name: Download keystore
        env:
          KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}
        run: echo "$KEYSTORE_BASE64" | base64 --decode > android/app/anymex.jks
      - name: Set up signing variables
        env:
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS}}
        run: |
          echo "storePassword=$KEYSTORE_PASSWORD" > android/key.properties
          echo "keyPassword=$KEY_PASSWORD" >> android/key.properties
          echo "keyAlias=$KEY_ALIAS" >> android/key.properties
          echo "storeFile=anymex.jks" >> android/key.properties

      - name: Setup .env File
        env:
          AL_CLIENT_ID: ${{ secrets.AL_CLIENT_ID }}
          AL_CLIENT_SECRET: ${{ secrets.AL_CLIENT_SECRET }}
          SIMKL_CLIENT_ID: ${{ secrets.SIMKL_CLIENT_ID }}
          SIMKL_CLIENT_SECRET: ${{ secrets.SIMKL_CLIENT_SECRET }}
          MAL_CLIENT_ID: ${{ secrets.MAL_CLIENT_ID }}
          MAL_CLIENT_SECRET: ${{ secrets.MAL_CLIENT_SECRET }}
          CALLBACK_SCHEME: ${{ secrets.CALLBACK_SCHEME }}
        run: |
          echo "AL_CLIENT_ID=$AL_CLIENT_ID" > .env
          echo "AL_CLIENT_SECRET=$AL_CLIENT_SECRET" >> .env
          echo "SIMKL_CLIENT_ID=$SIMKL_CLIENT_ID" >> .env
          echo "SIMKL_CLIENT_SECRET=$SIMKL_CLIENT_SECRET" >> .env
          echo "MAL_CLIENT_ID=$MAL_CLIENT_ID" >> .env
          echo "MAL_CLIENT_SECRET=$MAL_CLIENT_SECRET" >> .env
          echo "CALLBACK_SCHEME=$CALLBACK_SCHEME" >> .env

      - name: Get Dependencies
        run: flutter pub get

      - name: Build Android with Split ABI
        run: flutter build apk --split-per-abi

      - name: Rename APKs
        run: |
          mv build/app/outputs/flutter-apk/app-armeabi-v7a-release.apk build/app/outputs/flutter-apk/AnymeX-Android-armeabi-v7a.apk
          mv build/app/outputs/flutter-apk/app-arm64-v8a-release.apk build/app/outputs/flutter-apk/AnymeX-Android-arm64.apk
          mv build/app/outputs/flutter-apk/app-x86_64-release.apk build/app/outputs/flutter-apk/AnymeX-Android-x86_64.apk

      - name: Build Universal APK
        run: flutter build apk --release

      - name: Rename Universal APK
        run: mv build/app/outputs/flutter-apk/app-release.apk build/app/outputs/flutter-apk/AnymeX-Android-universal.apk

      - name: Upload arm64 File To Google Drive
        id: gdriveUpload_arm64
        uses: hoatruongdev09/google-drive-file-upload-github-action@v1.1
        with:
          file-path: build/app/outputs/flutter-apk/AnymeX-Android-arm64.apk
          upload-name: AnymeX-Android-arm64_${{github.ref_name}}.apk
          upload-to-folder-id: 1mCTGzZ-BR9C-4REzCmLlh7fO95vdYGT5 #need to change it
          service-account-json: "${{secrets.GOOGLE_KEY}}"
          overrwrite: true
      
      - name: Upload armeabi File To Google Drive
        id: gdriveUpload_armeabi
        uses: hoatruongdev09/google-drive-file-upload-github-action@v1.1
        with:
          file-path: build/app/outputs/flutter-apk/AnymeX-Android-armeabi-v7a.apk
          upload-name: AnymeX-Android-armeabi-v7a_${{github.ref_name}}.apk
          upload-to-folder-id: 1mCTGzZ-BR9C-4REzCmLlh7fO95vdYGT5 #need to change it
          service-account-json: "${{secrets.GOOGLE_KEY}}"
          overrwrite: true
      
      - name: Upload x86 File To Google Drive
        id: gdriveUpload_x86
        uses: hoatruongdev09/google-drive-file-upload-github-action@v1.1
        with:
          file-path: build/app/outputs/flutter-apk/AnymeX-Android-x86_64.apk
          upload-name: AnymeX-Android-x86_64_${{github.ref_name}}.apk
          upload-to-folder-id: 1mCTGzZ-BR9C-4REzCmLlh7fO95vdYGT5 #need to change it
          service-account-json: "${{secrets.GOOGLE_KEY}}"
          overrwrite: true
      
      - name: Upload Universal APK To Google Drive
        id: gdriveUpload_universal
        uses: hoatruongdev09/google-drive-file-upload-github-action@v1.1
        with:
          file-path: build/app/outputs/flutter-apk/AnymeX-Android-universal.apk
          upload-name: AnymeX-Android-universal_${{github.ref_name}}.apk
          upload-to-folder-id: 1mCTGzZ-BR9C-4REzCmLlh7fO95vdYGT5 #need to change it
          service-account-json: "${{secrets.GOOGLE_KEY}}"
          overrwrite: true

  build-ios:
    if: contains(github.event.head_commit.message, '[build]')
    runs-on: macos-latest
    outputs:
      ios_link: ${{ steps.gdriveUpload_ios.outputs.web-content-link }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.24.0"

      - name: Setup .env File
        env:
          AL_CLIENT_ID: ${{ secrets.AL_CLIENT_ID }}
          AL_CLIENT_SECRET: ${{ secrets.AL_CLIENT_SECRET }}
          SIMKL_CLIENT_ID: ${{ secrets.SIMKL_CLIENT_ID }}
          SIMKL_CLIENT_SECRET: ${{ secrets.SIMKL_CLIENT_SECRET }}
          MAL_CLIENT_ID: ${{ secrets.MAL_CLIENT_ID }}
          MAL_CLIENT_SECRET: ${{ secrets.MAL_CLIENT_SECRET }}
          CALLBACK_SCHEME: ${{ secrets.CALLBACK_SCHEME }}
        run: |
          echo "AL_CLIENT_ID=$AL_CLIENT_ID" > .env
          echo "AL_CLIENT_SECRET=$AL_CLIENT_SECRET" >> .env
          echo "SIMKL_CLIENT_ID=$SIMKL_CLIENT_ID" >> .env
          echo "SIMKL_CLIENT_SECRET=$SIMKL_CLIENT_SECRET" >> .env
          echo "MAL_CLIENT_ID=$MAL_CLIENT_ID" >> .env
          echo "MAL_CLIENT_SECRET=$MAL_CLIENT_SECRET" >> .env
          echo "CALLBACK_SCHEME=$CALLBACK_SCHEME" >> .env

      - name: Get Dependencies
        run: flutter pub get

      - name: Build iOS
        run: |
          flutter build ios --release --no-codesign
          cd build/ios/iphoneos
          mkdir -p Payload
          cd Payload
          ln -s ../Runner.app
          cd ..
          zip -r AnymeX-iOS-${{ github.ref_name }}.ipa Payload
          mv AnymeX-iOS-${{ github.ref_name }}.ipa ../../../

      - name: Upload iOS IPA To Google Drive
        id: gdriveUpload_ios
        uses: hoatruongdev09/google-drive-file-upload-github-action@v1.1
        with:
          file-path: AnymeX-iOS-${{ github.ref_name }}.ipa
          upload-name: AnymeX-iOS-${{ github.ref_name }}.ipa
          upload-to-folder-id: 1mHFP5EdZD-abGDJU5l0752dZLnXED3Z0 #need to change it
          service-account-json: "${{secrets.GOOGLE_KEY}}"
          overrwrite: true

  build-linux:
    if: contains(github.event.head_commit.message, '[build]')
    runs-on: ubuntu-latest
    outputs:
      linux_zip_link: ${{ steps.gdriveUpload_linux_zip.outputs.web-content-link }}
      linux_appimage_link: ${{ steps.gdriveUpload_linux_appimage.outputs.web-content-link }}
      linux_rpm_link: ${{ steps.gdriveUpload_linux_rpm.outputs.web-content-link }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ninja-build cmake clang mpv libgtk-3-dev libblkid-dev liblzma-dev pkg-config libmpv-dev webkit2gtk-4.1 fuse rpm
          wget -O appimagetool "https://github.com/AppImage/AppImageKit/releases/latest/download/appimagetool-x86_64.AppImage"
          chmod +x appimagetool
          sudo mv appimagetool /usr/local/bin/

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.24.0"

      - name: Setup .env File
        env:
          AL_CLIENT_ID: ${{ secrets.AL_CLIENT_ID }}
          AL_CLIENT_SECRET: ${{ secrets.AL_CLIENT_SECRET }}
          SIMKL_CLIENT_ID: ${{ secrets.SIMKL_CLIENT_ID }}
          SIMKL_CLIENT_SECRET: ${{ secrets.SIMKL_CLIENT_SECRET }}
          MAL_CLIENT_ID: ${{ secrets.MAL_CLIENT_ID }}
          MAL_CLIENT_SECRET: ${{ secrets.MAL_CLIENT_SECRET }}
          CALLBACK_SCHEME: ${{ secrets.CALLBACK_SCHEME }}
        run: |
          echo "AL_CLIENT_ID=$AL_CLIENT_ID" > .env
          echo "AL_CLIENT_SECRET=$AL_CLIENT_SECRET" >> .env
          echo "SIMKL_CLIENT_ID=$SIMKL_CLIENT_ID" >> .env
          echo "SIMKL_CLIENT_SECRET=$SIMKL_CLIENT_SECRET" >> .env
          echo "MAL_CLIENT_ID=$MAL_CLIENT_ID" >> .env
          echo "MAL_CLIENT_SECRET=$MAL_CLIENT_SECRET" >> .env
          echo "CALLBACK_SCHEME=$CALLBACK_SCHEME" >> .env

      - name: Get Dependencies
        run: flutter pub get

      - name: Build Linux
        run: flutter build linux --release

      - name: Create AppImage
        run: |
          # Create fresh AppDir structure
          rm -rf AppDir
          mkdir -p AppDir/usr/bin
          mkdir -p AppDir/usr/share/icons/hicolor/256x256/apps
          # Copy built files
          cp -r build/linux/x64/release/bundle/* AppDir/usr/bin/
          cp assets/images/logo.png AppDir/usr/share/icons/hicolor/256x256/apps/anymex.png
          cp assets/images/logo.png AppDir/anymex.png
          # Create desktop file in AppDir root
          cat <<EOF > AppDir/anymex.desktop
          [Desktop Entry]
          Name=AnymeX
          Exec=usr/bin/anymex
          Icon=anymex
          Type=Application
          Categories=Utility;
          EOF
          # Create AppRun file
          cat <<EOF > AppDir/AppRun
          #!/bin/sh
          SELF=\$(readlink -f "\$0")
          HERE=\${SELF%/*}
          export PATH="\${HERE}/usr/bin/:\${PATH}"
          export LD_LIBRARY_PATH="\${HERE}/usr/lib/:\${LD_LIBRARY_PATH}"
          exec "\${HERE}/usr/bin/anymex" "\$@"
          EOF
          chmod +x AppDir/AppRun
          # Make AppImage
          /usr/local/bin/appimagetool AppDir
          mv AnymeX-x86_64.AppImage build/linux/x64/release/AnymeX-Linux.AppImage

      - name: Create RPM Package
        run: |
          mkdir -p rpm_build/{BUILD,RPMS,SOURCES,SPECS,SRPMS}
          cp -r build/linux/x64/release/bundle rpm_build/SOURCES/anymex-1.0.0
          tar czf rpm_build/SOURCES/anymex-1.0.0.tar.gz -C rpm_build/SOURCES anymex-1.0.0
          mkdir -p rpm_build/SOURCES/usr/share/icons/hicolor/256x256/apps
          cp assets/images/logo.png rpm_build/SOURCES/usr/share/icons/hicolor/256x256/apps/anymex.png
          # RPM Spec File
          cat <<EOF > rpm_build/SPECS/anymex.spec
          Name: anymex
          Version: 1.0.0
          Release: 1%{?dist}
          Summary: AnymeX is a Flutter-based opensource app for tracking anime, mangas and novels
          License: MIT
          Source0: %{name}-%{version}.tar.gz
          BuildArch: x86_64

          %description
          AnymeX is a Flutter-based opensource app for tracking anime, mangas and novels.

          %prep
          %setup -q

          %install
          mkdir -p %{buildroot}/usr/bin
          mkdir -p %{buildroot}/usr/share/applications
          mkdir -p %{buildroot}/usr/share/icons/hicolor/256x256/apps
          cp -r * %{buildroot}/usr/bin/
          cp -r %{_sourcedir}/usr/share/* %{buildroot}/usr/share/
          cat <<EOL > %{buildroot}/usr/share/applications/anymex.desktop
          [Desktop Entry]
          Name=AnymeX
          Exec=/usr/bin/anymex
          Icon=anymex
          Type=Application
          Categories=Utility;
          EOL
          %files
          /usr/bin/*
          /usr/share/applications/anymex.desktop
          /usr/share/icons/hicolor/256x256/apps/anymex.png
          EOF

          rpmbuild --define "_topdir $(pwd)/rpm_build" -ba rpm_build/SPECS/anymex.spec
          mv rpm_build/RPMS/x86_64/*.rpm build/linux/x64/release/AnymeX-Linux.rpm

      - name: Create ZIP Archive
        run: |
          cd build/linux/x64/release/bundle
          zip -r ../AnymeX-Linux.zip ./*

      - name: Upload Linux ZIP to Google Drive
        id: gdriveUpload_linux_zip
        uses: hoatruongdev09/google-drive-file-upload-github-action@v1.1
        with:
          file-path: build/linux/x64/release/AnymeX-Linux.zip
          upload-name: AnymeX-Linux-${{ github.ref_name }}.zip
          upload-to-folder-id: 1v1WYL_-jEpzJ0M6ba7fkRIwqsbscliXT
          service-account-json: "${{secrets.GOOGLE_KEY}}"
          overrwrite: true
      
      - name: Upload Linux AppImage to Google Drive
        id: gdriveUpload_linux_appimage
        uses: hoatruongdev09/google-drive-file-upload-github-action@v1.1
        with:
          file-path: build/linux/x64/release/AnymeX-Linux.AppImage
          upload-name: AnymeX-Linux-${{ github.ref_name }}.AppImage
          upload-to-folder-id: 1v1WYL_-jEpzJ0M6ba7fkRIwqsbscliXT
          service-account-json: "${{secrets.GOOGLE_KEY}}"
          overrwrite: true
      
      - name: Upload Linux RPM to Google Drive
        id: gdriveUpload_linux_rpm
        uses: hoatruongdev09/google-drive-file-upload-github-action@v1.1
        with:
          file-path: build/linux/x64/release/AnymeX-Linux.rpm
          upload-name: AnymeX-Linux-${{ github.ref_name }}.rpm
          upload-to-folder-id: 1v1WYL_-jEpzJ0M6ba7fkRIwqsbscliXT
          service-account-json: "${{secrets.GOOGLE_KEY}}"
          overrwrite: true


  build-windows:
    if: contains(github.event.head_commit.message, '[build]')
    runs-on: windows-latest
    outputs:
      windows_zip_link: ${{ steps.gdriveUpload_windows_zip.outputs.web-content-link }}
      windows_exe_link: ${{ steps.gdriveUpload_windows_exe.outputs.web-content-link }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.24.0"

      - name: Setup .env File
        env:
          AL_CLIENT_ID: ${{ secrets.AL_CLIENT_ID }}
          AL_CLIENT_SECRET: ${{ secrets.AL_CLIENT_SECRET }}
          SIMKL_CLIENT_ID: ${{ secrets.SIMKL_CLIENT_ID }}
          SIMKL_CLIENT_SECRET: ${{ secrets.SIMKL_CLIENT_SECRET }}
          MAL_CLIENT_ID: ${{ secrets.MAL_CLIENT_ID }}
          MAL_CLIENT_SECRET: ${{ secrets.MAL_CLIENT_SECRET }}
          CALLBACK_SCHEME: ${{ secrets.CALLBACK_SCHEME }}
        run: |
          echo "AL_CLIENT_ID=$env:AL_CLIENT_ID" > .env
          echo "AL_CLIENT_SECRET=$env:AL_CLIENT_SECRET" >> .env
          echo "SIMKL_CLIENT_ID=$env:SIMKL_CLIENT_ID" >> .env
          echo "SIMKL_CLIENT_SECRET=$env:SIMKL_CLIENT_SECRET" >> .env
          echo "MAL_CLIENT_ID=$env:MAL_CLIENT_ID" >> .env
          echo "MAL_CLIENT_SECRET=$env:MAL_CLIENT_SECRET" >> .env
          echo "CALLBACK_SCHEME=$env:CALLBACK_SCHEME" >> .env

      - name: Get Dependencies
        run: flutter pub get

      - name: Build Windows
        run: dart run inno_bundle:build --release

      - name: Create ZIP file for Windows Build
        run: |
          cd build/windows/x64/runner/Release
          Compress-Archive -Path * -DestinationPath AnymeX-Windows.zip

      - name: Upload Windows ZIP to Google Drive
        id: gdriveUpload_windows_zip
        uses: hoatruongdev09/google-drive-file-upload-github-action@v1.1
        with:
          file-path: build/windows/x64/runner/Release/AnymeX-Windows.zip
          upload-name: AnymeX-Windows-${{ github.ref_name }}.zip
          upload-to-folder-id: 1wQbVubcT2JvviSOyaoI7cDbHigkMcj2z
          service-account-json: "${{secrets.GOOGLE_KEY}}"
          overrwrite: true
      
      - name: Upload Windows Installer EXE to Google Drive
        id: gdriveUpload_windows_exe
        uses: hoatruongdev09/google-drive-file-upload-github-action@v1.1
        with:
          file-path: build/windows/x64/installer/Release/AnymeX-x86_64-2.9.2-Installer.exe
          upload-name: AnymeX-x86_64-${{ github.ref_name }}-Installer.exe
          upload-to-folder-id: 1wQbVubcT2JvviSOyaoI7cDbHigkMcj2z
          service-account-json: "${{secrets.GOOGLE_KEY}}"
          overrwrite: true


  build-macos:
    if: contains(github.event.head_commit.message, '[build]')
    runs-on: macos-latest
    outputs:
      macos_link: ${{ steps.gdriveUpload_macos.outputs.web-content-link }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.24.0"

      - name: Setup .env File
        env:
          AL_CLIENT_ID: ${{ secrets.AL_CLIENT_ID }}
          AL_CLIENT_SECRET: ${{ secrets.AL_CLIENT_SECRET }}
          SIMKL_CLIENT_ID: ${{ secrets.SIMKL_CLIENT_ID }}
          SIMKL_CLIENT_SECRET: ${{ secrets.SIMKL_CLIENT_SECRET }}
          MAL_CLIENT_ID: ${{ secrets.MAL_CLIENT_ID }}
          MAL_CLIENT_SECRET: ${{ secrets.MAL_CLIENT_SECRET }}
          CALLBACK_SCHEME: ${{ secrets.CALLBACK_SCHEME }}
        run: |
          echo "AL_CLIENT_ID=$AL_CLIENT_ID" > .env
          echo "AL_CLIENT_SECRET=$AL_CLIENT_SECRET" >> .env
          echo "SIMKL_CLIENT_ID=$SIMKL_CLIENT_ID" >> .env
          echo "SIMKL_CLIENT_SECRET=$SIMKL_CLIENT_SECRET" >> .env
          echo "MAL_CLIENT_ID=$MAL_CLIENT_ID" >> .env
          echo "MAL_CLIENT_SECRET=$MAL_CLIENT_SECRET" >> .env
          echo "CALLBACK_SCHEME=$CALLBACK_SCHEME" >> .env

      - name: Get Dependencies
        run: flutter pub get

      - name: Build macOS
        run: flutter build macos --release

      - name: Create DMG file for macOS Build
        run: |
          mkdir -p build/macos/Release
          hdiutil create -volname "AnymeX" -srcfolder build/macos/Build/Products/Release/AnymeX.app -ov -format UDZO build/macos/Release/AnymeX.dmg
      
      - name: Upload macOS DMG to Google Drive
        id: gdriveUpload_macos
        uses: hoatruongdev09/google-drive-file-upload-github-action@v1.1
        with:
          file-path: build/macos/Release/AnymeX.dmg
          upload-name: AnymeX-macOS-${{ github.ref_name }}.dmg
          upload-to-folder-id: 1mVoJgft40o6SW6otWVBelkMlJdyimHp5
          service-account-json: "${{secrets.GOOGLE_KEY}}"
          overrwrite: true

  sendMessage:
    runs-on: ubuntu-latest
    needs: [build-android, build-ios, build-linux, build-windows, build-macos]
    steps:
      - name: Cloing repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download last SHA artifact
        uses: dawidd6/action-download-artifact@v6
        with:
          workflow: dart.yml
          name: last-shaa
        continue-on-error: true

      - name: Get Commits Since Last Run
        run: |
          if [ -f last_sha.txt ]; then
            LAST_SHA=$(cat last_sha.txt)
          else
            LAST_SHA=$(git rev-list --max-parents=0 HEAD)
          fi
          echo "Commits since $LAST_SHA:"
          
          # Store commit logs in a file directly
          git log $LAST_SHA..HEAD --pretty=format:"* [%H](https://github.com/$GITHUB_REPOSITORY/commit/%H) : %s" > commit_log.txt
      
          # Encode and save the file content to GITHUB_ENV
          echo "COMMIT_LOG<<EOF" >> $GITHUB_ENV
          cat commit_log.txt >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
      
          # Extract branch name from github.ref
          BRANCH=${{ github.ref }}
          BRANCH=${BRANCH#refs/heads/}
          echo "BRANCH=${BRANCH}" >> $GITHUB_ENV
        shell: bash

        env:
          CI: true
        continue-on-error: true

      - name: Save Current SHA for Next Run
        run: echo ${{ github.sha }} > last_sha.txt

      - name: Send message to Discord
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_ALPHA }}
        run: |
          # Start with release header
          echo "**🚀 New Release: Beta**" > header.txt
          
          # Extract all categories into separate files
          echo "**🚀 Features**" > TFeatures.txt
          echo "$(echo "$COMMIT_LOGS" | grep -iE '^\*\s\[[a-f0-9]+\]\(.*\):\sfeat' | sed -E 's/\): [^:]+:/) :/g' | head -n 5)" > feat.txt

          echo "**🐛 Fixes**" > TFixes.txt
          echo "$(echo "$COMMIT_LOGS" | grep -iE '^\*\s\[[a-f0-9]+\]\(.*\):\s(fix|bug|improvement|patch)' | sed -E 's/\): [^:]+:/) :/g' | head -n 5)" > fixes.txt

          echo "**🔧 Refactors**" > TRefactors.txt
          echo "$(echo "$COMMIT_LOGS" | grep -iE '^\*\s\[[a-f0-9]+\]\(.*\):\srefactor' | sed -E 's/\): [^:]+:/) :/g' | head -n 5)" > refactors.txt

          echo "**💅 Style**" > TStyle.txt
          echo "$(echo "$COMMIT_LOGS" | grep -iE '^\*\s\[[a-f0-9]+\]\(.*\):\sstyle' | sed -E 's/\): [^:]+:/) :/g' | head -n 5)" > style.txt

          echo "**⚡ Performance**" > TPerformance.txt
          echo "$(echo "$COMMIT_LOGS" | grep -iE '^\*\s\[[a-f0-9]+\]\(.*\):\sperf' | sed -E 's/\): [^:]+:/) :/g' | head -n 5)" > perf.txt

          echo "**🛠 Chores**" > TChores.txt
          echo "$(echo "$COMMIT_LOGS" | grep -iE '^\*\s\[[a-f0-9]+\]\(.*\):\s(chore|docs|build|ci)' | sed -E 's/\): [^:]+:/) :/g' | head -n 5)" > chores.txt
        
          default_color="#1ac4c5"
          hex_to_decimal() { printf '%d' "0x${1#"#"}"; }
          embed_color=$(hex_to_decimal "$default_color")

          # Ensure VERSION is not empty
          VERSION=${VERSION:-"Beta"}
      
          discord_data=$(jq -nc \
                        --arg role_mention "<@&1313089691523878942>" \
                        --arg field_value "$COMMIT_LOGS

            [❓Don't know which version to download? Click here!](https://github.com/${{ github.repository }}/blob/main/INSTALLATION.md)" \
            
                        --arg footer_text "Version $VERSION" \
                        --arg timestamp "$(date -u +%Y-%m-%dT%H:%M:%S.000Z)" \
                        --argjson embed_color "$embed_color" \
                        '{
                          "content": $role_mention,
                          "embeds": [
                            {
                              "title": "🚀 New Release: ${{env.LATEST_TAG}}",
                              "color": $embed_color,
                              "description": $field_value,
                              "footer": {
                                "text": $footer_text
                              },
                              "timestamp": $timestamp
                            }
                          ]
                        }')

          echo "Debug: Final Discord payload is: $discord_data"

          # Send the message to Discord using the webhook
          curl -H "Content-Type: application/json" \
              -X POST \
              -d "$discord_data" \
              "$DISCORD_WEBHOOK_URL"

      - name: Send message to Telegram
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          TELEGRAM_TOPIC: ${{ secrets.TELEGRAM_THREAD_ID }}
        run: |

          # Start with release header
          echo "<b>🚀 New Release: Beta</b>" > header.txt
          
          # Extract all categories into separate files
          echo "**🚀 Features**" > TFeatures.txt
          echo "$(echo "$COMMIT_LOGS" | grep -iE '^\*\s\[[a-f0-9]+\]\(.*\):\sfeat' | sed -E 's/\): [^:]+:/) :/g' | head -n 5)" > feat.txt

          echo "**🐛 Fixes**" > TFixes.txt
          echo "$(echo "$COMMIT_LOGS" | grep -iE '^\*\s\[[a-f0-9]+\]\(.*\):\s(fix|bug|improvement|patch)' | sed -E 's/\): [^:]+:/) :/g' | head -n 5)" > fixes.txt

          echo "**🔧 Refactors**" > TRefactors.txt
          echo "$(echo "$COMMIT_LOGS" | grep -iE '^\*\s\[[a-f0-9]+\]\(.*\):\srefactor' | sed -E 's/\): [^:]+:/) :/g' | head -n 5)" > refactors.txt

          echo "**💅 Style**" > TStyle.txt
          echo "$(echo "$COMMIT_LOGS" | grep -iE '^\*\s\[[a-f0-9]+\]\(.*\):\sstyle' | sed -E 's/\): [^:]+:/) :/g' | head -n 5)" > style.txt

          echo "**⚡ Performance**" > TPerformance.txt
          echo "$(echo "$COMMIT_LOGS" | grep -iE '^\*\s\[[a-f0-9]+\]\(.*\):\sperf' | sed -E 's/\): [^:]+:/) :/g' | head -n 5)" > perf.txt

          echo "**🛠 Chores**" > TChores.txt
          echo "$(echo "$COMMIT_LOGS" | grep -iE '^\*\s\[[a-f0-9]+\]\(.*\):\s(chore|docs|build|ci)' | sed -E 's/\): [^:]+:/) :/g' | head -n 5)" > chores.txt

          # Process each file through the parser
          chmod +x scripts/tel_commit_parser.sed
          
          ./scripts/tel_commit_parser.sed feat.txt > feat_clean.txt
          ./scripts/tel_commit_parser.sed fixes.txt > fixes_clean.txt
          ./scripts/tel_commit_parser.sed refactors.txt > refactors_clean.txt
          ./scripts/tel_commit_parser.sed style.txt > style_clean.txt
          ./scripts/tel_commit_parser.sed perf.txt > perf_clean.txt
          ./scripts/tel_commit_parser.sed chores.txt > chores_clean.txt
          
          ./scripts/tel_commit_parser.sed TFeatures.txt > TFeaturesT.txt
          ./scripts/tel_commit_parser.sed TFixes.txt > TFixesT.txt
          ./scripts/tel_commit_parser.sed TRefactors.txt > TRefactorsT.txt
          ./scripts/tel_commit_parser.sed TStyle.txt > TStyleT.txt
          ./scripts/tel_commit_parser.sed TPerformance.txt > TPerformanceT.txt
          ./scripts/tel_commit_parser.sed TChores.txt > TChoresT.txt

          # Check and remove empty categories
          if [ ! -s feat_clean.txt ] || [ "$(tr -d '[:space:]' < feat_clean.txt)" = "" ]; then
              rm -f feat_clean.txt TFeaturesT.txt
          fi
          if [ ! -s fixes_clean.txt ] || [ "$(tr -d '[:space:]' < fixes_clean.txt)" = "" ]; then
              rm -f fixes_clean.txt TFixesT.txt
          fi
          if [ ! -s refactors_clean.txt ] || [ "$(tr -d '[:space:]' < refactors_clean.txt)" = "" ]; then
              rm -f refactors_clean.txt TRefactorsT.txt
          fi
          if [ ! -s style_clean.txt ] || [ "$(tr -d '[:space:]' < style_clean.txt)" = "" ]; then
              rm -f style_clean.txt TStyleT.txt
          fi
          if [ ! -s perf_clean.txt ] || [ "$(tr -d '[:space:]' < perf_clean.txt)" = "" ]; then
              rm -f perf_clean.txt TPerformanceT.txt
          fi
          if [ ! -s chores_clean.txt ] || [ "$(tr -d '[:space:]' < chores_clean.txt)" = "" ]; then
              rm -f chores_clean.txt TChoresT.txt
          fi

          # Combine categories into final output
          {
              cat header.txt
              echo ""
              [ -f TFeaturesT.txt ] && [ -f feat_clean.txt ] && echo -n "$(cat TFeaturesT.txt) <blockquote>$(cat feat_clean.txt)</blockquote> "
              [ -f TFixesT.txt ] && [ -f fixes_clean.txt ] && echo -n "$(cat TFixesT.txt) <blockquote>$(cat fixes_clean.txt)</blockquote> "
              [ -f TRefactorsT.txt ] && [ -f refactors_clean.txt ] && echo -n "$(cat TRefactorsT.txt) <blockquote>$(cat refactors_clean.txt)</blockquote> "
              [ -f TStyleT.txt ] && [ -f style_clean.txt ] && echo -n "$(cat TStyleT.txt) <blockquote>$(cat style_clean.txt)</blockquote> "
              [ -f TPerformanceT.txt ] && [ -f perf_clean.txt ] && echo -n "$(cat TPerformanceT.txt) <blockquote>$(cat perf_clean.txt)</blockquote> "
              [ -f TChoresT.txt ] && [ -f chores_clean.txt ] && echo -n "$(cat TChoresT.txt) <blockquote>$(cat chores_clean.txt)</blockquote> "
              echo ""
              echo "❓<a href='https://github.com/${{ github.repository }}/blob/main/INSTALLATION.md'>Don't know which version to download? Click here!</a>"
              } > output.txt

          if [ ! -s output.txt ]; then
              echo "No commits found. Skipping Telegram message."
              exit 0
          fi
          markdown_info_tel=$(< output.txt)
          echo "Final Telegram Message:"
          echo "$markdown_info_tel"
          curl -s -X POST "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage" \
              -d "chat_id=$TELEGRAM_CHAT_ID" \
              -d "text=$markdown_info_tel" \
              -d "parse_mode=HTML" \
              -d "disable_web_page_preview=true"
              
          Commits:
          ${telegram_commit_messages}
          Version: $VERSION" \
              -d "parse_mode=HTML" \
              -d "disable_web_page_preview=true")
    
      - name: Upload Current SHA as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: last-sha
          path: last_sha.txt
          
      - name: Send Discord Notification with Download Links
        env:
          ANDROID_ARM64_LINK: ${{ needs.build-android.outputs.arm64_link }}
          ANDROID_ARMEABI_LINK: ${{ needs.build-android.outputs.armeabi_link }}
          ANDROID_X86_LINK: ${{ needs.build-android.outputs.x86_link }}
          ANDROID_UNIVERSAL_LINK: ${{ needs.build-android.outputs.universal_link }}
          IOS_LINK: ${{ needs.build-ios.outputs.ios_link }}
          LINUX_ZIP_LINK: ${{ needs.build-linux.outputs.linux_zip_link }}
          LINUX_APPIMAGE_LINK: ${{ needs.build-linux.outputs.linux_appimage_link }}
          LINUX_RPM_LINK: ${{ needs.build-linux.outputs.linux_rpm_link }}
          WINDOWS_ZIP_LINK: ${{ needs.build-windows.outputs.windows_zip_link }}
          WINDOWS_EXE_LINK: ${{ needs.build-windows.outputs.windows_exe_link }}
          MACOS_LINK: ${{ needs.build-macos.outputs.macos_link }}
        run: |
          MESSAGE="Beta Released
      
          🔹 [Download]($ANDROID_ARM64_LINK) | **Android (arm64)**
          🔹 [Download]($ANDROID_ARMEABI_LINK) | **Android (armeabi-v7a)**
          🔹 [Download]($ANDROID_UNIVERSAL_LINK) | **Android (universal)**
          🔹 [Download]($ANDROID_X86_LINK) | **Android (x86 & x64)**
          🔹 [Download]($WINDOWS_ZIP_LINK) | **Windows ZIP**
          🔹 [Download]($WINDOWS_EXE_LINK) | **Windows EXE**
          🔹 [Download]($LINUX_ZIP_LINK) | **Linux ZIP**
          🔹 [Download]($LINUX_APPIMAGE_LINK) | **Linux AppImage**
          🔹 [Download]($LINUX_RPM_LINK) | **Linux RPM**
          🔹 [Download]($IOS_LINK) | **iOS**
          🔹 [Download]($MACOS_LINK) | **macOS**"
      
          # Send to Discord if the message is not empty
          if [[ -n "$MESSAGE" ]]; then
            curl -H "Content-Type: application/json" \
                 -d "{\"content\": \"$MESSAGE\"}" \
                 "${{ secrets.DISCORD_WEBHOOK_ALPHA }}"
          fi
          
      - name: Send Telegram Notification
        env:
          ANDROID_ARM64_LINK: ${{ needs.build-android.outputs.arm64_link }}
          ANDROID_ARMEABI_LINK: ${{ needs.build-android.outputs.armeabi_link }}
          ANDROID_X86_LINK: ${{ needs.build-android.outputs.x86_link }}
          ANDROID_UNIVERSAL_LINK: ${{ needs.build-android.outputs.universal_link }}
          IOS_LINK: ${{ needs.build-ios.outputs.ios_link }}
          LINUX_ZIP_LINK: ${{ needs.build-linux.outputs.linux_zip_link }}
          LINUX_APPIMAGE_LINK: ${{ needs.build-linux.outputs.linux_appimage_link }}
          LINUX_RPM_LINK: ${{ needs.build-linux.outputs.linux_rpm_link }}
          WINDOWS_ZIP_LINK: ${{ needs.build-windows.outputs.windows_zip_link }}
          WINDOWS_EXE_LINK: ${{ needs.build-windows.outputs.windows_exe_link }}
          MACOS_LINK: ${{ needs.build-macos.outputs.macos_link }}
        run: |
          TELEGRAM_MESSAGE="🎉 *${{ env.LATEST_TAG }} Released* 🎉
      
          🔹 [Download]($ANDROID_ARM64_LINK) | **Android (arm64)**
          🔹 [Download]($ANDROID_ARMEABI_LINK) | **Android (armeabi-v7a)**
          🔹 [Download]($ANDROID_UNIVERSAL_LINK) | **Android (universal)**
          🔹 [Download]($ANDROID_X86_LINK) | **Android (x86 & x64)**
          🔹 [Download]($WINDOWS_ZIP_LINK) | **Windows ZIP**
          🔹 [Download]($WINDOWS_EXE_LINK) | **Windows EXE**
          🔹 [Download]($LINUX_ZIP_LINK) | **Linux ZIP**
          🔹 [Download]($LINUX_APPIMAGE_LINK) | **Linux AppImage**
          🔹 [Download]($LINUX_RPM_LINK) | **Linux RPM**
          🔹 [Download]($IOS_LINK) | **iOS**
          🔹 [Download]($MACOS_LINK) | **macOS**"
      
          curl -sS -f -X POST \
              "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
              -F "chat_id=${{ secrets.TELEGRAM_CHAT_ID }}" \
              -F "message_thread_id=${{ secrets.TELEGRAM_THREAD_ID }}" \
              -F parse_mode="Markdown" \
              -F disable_notification=true \
              -F "text=$TELEGRAM_MESSAGE"
