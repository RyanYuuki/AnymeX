name: Build (Beta)

on:
  push:
    branches:
      - beta
  workflow_dispatch:

jobs:
  build-android:
    if: contains(github.event.head_commit.message, '[build]')
    runs-on: ubuntu-latest
    outputs:
      android_link: ${{ steps.gdriveUpload.outputs.web-content-link }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: "adopt"
          java-version: "17"

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.24.0"

      - name: Download keystore
        env:
          KEYSTORE_BASE64: ${{ secrets.KEYSTORE_BASE64 }}
        run: echo "$KEYSTORE_BASE64" | base64 --decode > android/app/anymex.jks
      - name: Set up signing variables
        env:
          KEYSTORE_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_PASSWORD: ${{ secrets.KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS}}
        run: |
          echo "storePassword=$KEYSTORE_PASSWORD" > android/key.properties
          echo "keyPassword=$KEY_PASSWORD" >> android/key.properties
          echo "keyAlias=$KEY_ALIAS" >> android/key.properties
          echo "storeFile=anymex.jks" >> android/key.properties

      - name: Setup .env File
        env:
          AL_CLIENT_ID: ${{ secrets.AL_CLIENT_ID }}
          AL_CLIENT_SECRET: ${{ secrets.AL_CLIENT_SECRET }}
          SIMKL_CLIENT_ID: ${{ secrets.SIMKL_CLIENT_ID }}
          SIMKL_CLIENT_SECRET: ${{ secrets.SIMKL_CLIENT_SECRET }}
          MAL_CLIENT_ID: ${{ secrets.MAL_CLIENT_ID }}
          MAL_CLIENT_SECRET: ${{ secrets.MAL_CLIENT_SECRET }}
          CALLBACK_SCHEME: ${{ secrets.CALLBACK_SCHEME }}
        run: |
          echo "AL_CLIENT_ID=$AL_CLIENT_ID" > .env
          echo "AL_CLIENT_SECRET=$AL_CLIENT_SECRET" >> .env
          echo "SIMKL_CLIENT_ID=$SIMKL_CLIENT_ID" >> .env
          echo "SIMKL_CLIENT_SECRET=$SIMKL_CLIENT_SECRET" >> .env
          echo "MAL_CLIENT_ID=$MAL_CLIENT_ID" >> .env
          echo "MAL_CLIENT_SECRET=$MAL_CLIENT_SECRET" >> .env
          echo "CALLBACK_SCHEME=$CALLBACK_SCHEME" >> .env

      - name: Get Dependencies
        run: flutter pub get

      - name: Build Android with Split ABI
        run: flutter build apk --split-per-abi

      - name: Rename APKs
        run: |
          mv build/app/outputs/flutter-apk/app-armeabi-v7a-release.apk build/app/outputs/flutter-apk/AnymeX-Android-armeabi-v7a.apk
          mv build/app/outputs/flutter-apk/app-arm64-v8a-release.apk build/app/outputs/flutter-apk/AnymeX-Android-arm64.apk
          mv build/app/outputs/flutter-apk/app-x86_64-release.apk build/app/outputs/flutter-apk/AnymeX-Android-x86_64.apk

      - name: Build Universal APK
        run: flutter build apk --release

      - name: Rename Universal APK
        run: mv build/app/outputs/flutter-apk/app-release.apk build/app/outputs/flutter-apk/AnymeX-Android-universal.apk

      - name: Upload arm64 File To Google Drive
        id: gdriveUpload_arm64
        uses: hoatruongdev09/google-drive-file-upload-github-action@v1.1
        with:
          file-path: build/app/outputs/flutter-apk/AnymeX-Android-arm64.apk
          upload-name: AnymeX-Android-arm64_${{github.ref_name}}.apk
          upload-to-folder-id: 1mCTGzZ-BR9C-4REzCmLlh7fO95vdYGT5 #need to change it
          service-account-json: "${{secrets.GOOGLE_KEY}}"
          overrwrite: true
      
      - name: Upload armeabi File To Google Drive
        id: gdriveUpload_armeabi
        uses: hoatruongdev09/google-drive-file-upload-github-action@v1.1
        with:
          file-path: build/app/outputs/flutter-apk/AnymeX-Android-armeabi-v7a.apk
          upload-name: AnymeX-Android-armeabi-v7a_${{github.ref_name}}.apk
          upload-to-folder-id: 1mCTGzZ-BR9C-4REzCmLlh7fO95vdYGT5 #need to change it
          service-account-json: "${{secrets.GOOGLE_KEY}}"
          overrwrite: true
      
      - name: Upload x86 File To Google Drive
        id: gdriveUpload_x86
        uses: hoatruongdev09/google-drive-file-upload-github-action@v1.1
        with:
          file-path: build/app/outputs/flutter-apk/AnymeX-Android-x86_64.apk
          upload-name: AnymeX-Android-x86_64_${{github.ref_name}}.apk
          upload-to-folder-id: 1mCTGzZ-BR9C-4REzCmLlh7fO95vdYGT5 #need to change it
          service-account-json: "${{secrets.GOOGLE_KEY}}"
          overrwrite: true
      
      - name: Upload Universal APK To Google Drive
        id: gdriveUpload_universal
        uses: hoatruongdev09/google-drive-file-upload-github-action@v1.1
        with:
          file-path: build/app/outputs/flutter-apk/AnymeX-Android-universal.apk
          upload-name: AnymeX-Android-universal_${{github.ref_name}}.apk
          upload-to-folder-id: 1mCTGzZ-BR9C-4REzCmLlh7fO95vdYGT5 #need to change it
          service-account-json: "${{secrets.GOOGLE_KEY}}"
          overrwrite: true

  build-ios:
    if: contains(github.event.head_commit.message, '[build]')
    runs-on: macos-latest
    outputs:
      ios_link: ${{ steps.gdriveUpload.outputs.web-content-link }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.24.0"

      - name: Setup .env File
        env:
          AL_CLIENT_ID: ${{ secrets.AL_CLIENT_ID }}
          AL_CLIENT_SECRET: ${{ secrets.AL_CLIENT_SECRET }}
          SIMKL_CLIENT_ID: ${{ secrets.SIMKL_CLIENT_ID }}
          SIMKL_CLIENT_SECRET: ${{ secrets.SIMKL_CLIENT_SECRET }}
          MAL_CLIENT_ID: ${{ secrets.MAL_CLIENT_ID }}
          MAL_CLIENT_SECRET: ${{ secrets.MAL_CLIENT_SECRET }}
          CALLBACK_SCHEME: ${{ secrets.CALLBACK_SCHEME }}
        run: |
          echo "AL_CLIENT_ID=$AL_CLIENT_ID" > .env
          echo "AL_CLIENT_SECRET=$AL_CLIENT_SECRET" >> .env
          echo "SIMKL_CLIENT_ID=$SIMKL_CLIENT_ID" >> .env
          echo "SIMKL_CLIENT_SECRET=$SIMKL_CLIENT_SECRET" >> .env
          echo "MAL_CLIENT_ID=$MAL_CLIENT_ID" >> .env
          echo "MAL_CLIENT_SECRET=$MAL_CLIENT_SECRET" >> .env
          echo "CALLBACK_SCHEME=$CALLBACK_SCHEME" >> .env

      - name: Get Dependencies
        run: flutter pub get

      - name: Build iOS
        run: |
          flutter build ios --release --no-codesign
          cd build/ios/iphoneos
          mkdir -p Payload
          cd Payload
          ln -s ../Runner.app
          cd ..
          zip -r AnymeX-iOS-${{ github.ref_name }}.ipa Payload
          mv AnymeX-iOS-${{ github.ref_name }}.ipa ../../../

      - name: Upload iOS IPA To Google Drive
        id: gdriveUpload_ios
        uses: hoatruongdev09/google-drive-file-upload-github-action@v1.1
        with:
          file-path: AnymeX-iOS-${{ github.ref_name }}.ipa
          upload-name: AnymeX-iOS-${{ github.ref_name }}.ipa
          upload-to-folder-id: 1mHFP5EdZD-abGDJU5l0752dZLnXED3Z0 #need to change it
          service-account-json: "${{secrets.GOOGLE_KEY}}"
          overrwrite: true

  build-linux:
    if: contains(github.event.head_commit.message, '[build]')
    runs-on: ubuntu-latest
    outputs:
      linux_link: ${{ steps.gdriveUpload.outputs.web-content-link }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ninja-build cmake clang mpv libgtk-3-dev libblkid-dev liblzma-dev pkg-config libmpv-dev webkit2gtk-4.1 fuse rpm
          wget -O appimagetool "https://github.com/AppImage/AppImageKit/releases/latest/download/appimagetool-x86_64.AppImage"
          chmod +x appimagetool
          sudo mv appimagetool /usr/local/bin/

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.24.0"

      - name: Setup .env File
        env:
          AL_CLIENT_ID: ${{ secrets.AL_CLIENT_ID }}
          AL_CLIENT_SECRET: ${{ secrets.AL_CLIENT_SECRET }}
          SIMKL_CLIENT_ID: ${{ secrets.SIMKL_CLIENT_ID }}
          SIMKL_CLIENT_SECRET: ${{ secrets.SIMKL_CLIENT_SECRET }}
          MAL_CLIENT_ID: ${{ secrets.MAL_CLIENT_ID }}
          MAL_CLIENT_SECRET: ${{ secrets.MAL_CLIENT_SECRET }}
          CALLBACK_SCHEME: ${{ secrets.CALLBACK_SCHEME }}
        run: |
          echo "AL_CLIENT_ID=$AL_CLIENT_ID" > .env
          echo "AL_CLIENT_SECRET=$AL_CLIENT_SECRET" >> .env
          echo "SIMKL_CLIENT_ID=$SIMKL_CLIENT_ID" >> .env
          echo "SIMKL_CLIENT_SECRET=$SIMKL_CLIENT_SECRET" >> .env
          echo "MAL_CLIENT_ID=$MAL_CLIENT_ID" >> .env
          echo "MAL_CLIENT_SECRET=$MAL_CLIENT_SECRET" >> .env
          echo "CALLBACK_SCHEME=$CALLBACK_SCHEME" >> .env

      - name: Get Dependencies
        run: flutter pub get

      - name: Build Linux
        run: flutter build linux --release

      - name: Create AppImage
        run: |
          # Create fresh AppDir structure
          rm -rf AppDir
          mkdir -p AppDir/usr/bin
          mkdir -p AppDir/usr/share/icons/hicolor/256x256/apps
          # Copy built files
          cp -r build/linux/x64/release/bundle/* AppDir/usr/bin/
          cp assets/images/logo.png AppDir/usr/share/icons/hicolor/256x256/apps/anymex.png
          cp assets/images/logo.png AppDir/anymex.png
          # Create desktop file in AppDir root
          cat <<EOF > AppDir/anymex.desktop
          [Desktop Entry]
          Name=AnymeX
          Exec=usr/bin/anymex
          Icon=anymex
          Type=Application
          Categories=Utility;
          EOF
          # Create AppRun file
          cat <<EOF > AppDir/AppRun
          #!/bin/sh
          SELF=\$(readlink -f "\$0")
          HERE=\${SELF%/*}
          export PATH="\${HERE}/usr/bin/:\${PATH}"
          export LD_LIBRARY_PATH="\${HERE}/usr/lib/:\${LD_LIBRARY_PATH}"
          exec "\${HERE}/usr/bin/anymex" "\$@"
          EOF
          chmod +x AppDir/AppRun
          # Make AppImage
          /usr/local/bin/appimagetool AppDir
          mv AnymeX-x86_64.AppImage build/linux/x64/release/AnymeX-Linux.AppImage

      - name: Create RPM Package
        run: |
          mkdir -p rpm_build/{BUILD,RPMS,SOURCES,SPECS,SRPMS}
          cp -r build/linux/x64/release/bundle rpm_build/SOURCES/anymex-1.0.0
          tar czf rpm_build/SOURCES/anymex-1.0.0.tar.gz -C rpm_build/SOURCES anymex-1.0.0
          mkdir -p rpm_build/SOURCES/usr/share/icons/hicolor/256x256/apps
          cp assets/images/logo.png rpm_build/SOURCES/usr/share/icons/hicolor/256x256/apps/anymex.png
          # RPM Spec File
          cat <<EOF > rpm_build/SPECS/anymex.spec
          Name: anymex
          Version: 1.0.0
          Release: 1%{?dist}
          Summary: AnymeX is a Flutter-based opensource app for tracking anime, mangas and novels
          License: MIT
          Source0: %{name}-%{version}.tar.gz
          BuildArch: x86_64

          %description
          AnymeX is a Flutter-based opensource app for tracking anime, mangas and novels.

          %prep
          %setup -q

          %install
          mkdir -p %{buildroot}/usr/bin
          mkdir -p %{buildroot}/usr/share/applications
          mkdir -p %{buildroot}/usr/share/icons/hicolor/256x256/apps
          cp -r * %{buildroot}/usr/bin/
          cp -r %{_sourcedir}/usr/share/* %{buildroot}/usr/share/
          cat <<EOL > %{buildroot}/usr/share/applications/anymex.desktop
          [Desktop Entry]
          Name=AnymeX
          Exec=/usr/bin/anymex
          Icon=anymex
          Type=Application
          Categories=Utility;
          EOL
          %files
          /usr/bin/*
          /usr/share/applications/anymex.desktop
          /usr/share/icons/hicolor/256x256/apps/anymex.png
          EOF

          rpmbuild --define "_topdir $(pwd)/rpm_build" -ba rpm_build/SPECS/anymex.spec
          mv rpm_build/RPMS/x86_64/*.rpm build/linux/x64/release/AnymeX-Linux.rpm

      - name: Create ZIP Archive
        run: |
          cd build/linux/x64/release/bundle
          zip -r ../AnymeX-Linux.zip ./*

      - name: Upload Linux ZIP to Google Drive
        id: gdriveUpload_linux_zip
        uses: hoatruongdev09/google-drive-file-upload-github-action@v1.1
        with:
          file-path: build/linux/x64/release/AnymeX-Linux.zip
          upload-name: AnymeX-Linux-${{ github.ref_name }}.zip
          upload-to-folder-id: 1v1WYL_-jEpzJ0M6ba7fkRIwqsbscliXT
          service-account-json: "${{secrets.GOOGLE_KEY}}"
          overrwrite: true
      
      - name: Upload Linux AppImage to Google Drive
        id: gdriveUpload_linux_appimage
        uses: hoatruongdev09/google-drive-file-upload-github-action@v1.1
        with:
          file-path: build/linux/x64/release/AnymeX-Linux.AppImage
          upload-name: AnymeX-Linux-${{ github.ref_name }}.AppImage
          upload-to-folder-id: 1v1WYL_-jEpzJ0M6ba7fkRIwqsbscliXT
          service-account-json: "${{secrets.GOOGLE_KEY}}"
          overrwrite: true
      
      - name: Upload Linux RPM to Google Drive
        id: gdriveUpload_linux_rpm
        uses: hoatruongdev09/google-drive-file-upload-github-action@v1.1
        with:
          file-path: build/linux/x64/release/AnymeX-Linux.rpm
          upload-name: AnymeX-Linux-${{ github.ref_name }}.rpm
          upload-to-folder-id: 1v1WYL_-jEpzJ0M6ba7fkRIwqsbscliXT
          service-account-json: "${{secrets.GOOGLE_KEY}}"
          overrwrite: true


  build-windows:
    if: contains(github.event.head_commit.message, '[build]')
    runs-on: windows-latest
    outputs:
      windows_link: ${{ steps.gdriveUpload.outputs.web-content-link }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.24.0"

      - name: Setup .env File
        env:
          AL_CLIENT_ID: ${{ secrets.AL_CLIENT_ID }}
          AL_CLIENT_SECRET: ${{ secrets.AL_CLIENT_SECRET }}
          SIMKL_CLIENT_ID: ${{ secrets.SIMKL_CLIENT_ID }}
          SIMKL_CLIENT_SECRET: ${{ secrets.SIMKL_CLIENT_SECRET }}
          MAL_CLIENT_ID: ${{ secrets.MAL_CLIENT_ID }}
          MAL_CLIENT_SECRET: ${{ secrets.MAL_CLIENT_SECRET }}
          CALLBACK_SCHEME: ${{ secrets.CALLBACK_SCHEME }}
        run: |
          echo "AL_CLIENT_ID=$env:AL_CLIENT_ID" > .env
          echo "AL_CLIENT_SECRET=$env:AL_CLIENT_SECRET" >> .env
          echo "SIMKL_CLIENT_ID=$env:SIMKL_CLIENT_ID" >> .env
          echo "SIMKL_CLIENT_SECRET=$env:SIMKL_CLIENT_SECRET" >> .env
          echo "MAL_CLIENT_ID=$env:MAL_CLIENT_ID" >> .env
          echo "MAL_CLIENT_SECRET=$env:MAL_CLIENT_SECRET" >> .env
          echo "CALLBACK_SCHEME=$env:CALLBACK_SCHEME" >> .env

      - name: Get Dependencies
        run: flutter pub get

      - name: Build Windows
        run: dart run inno_bundle:build --release

      - name: Create ZIP file for Windows Build
        run: |
          cd build/windows/x64/runner/Release
          Compress-Archive -Path * -DestinationPath AnymeX-Windows.zip

      - name: Upload Windows ZIP to Google Drive
        id: gdriveUpload_windows_zip
        uses: hoatruongdev09/google-drive-file-upload-github-action@v1.1
        with:
          file-path: build/windows/x64/runner/Release/AnymeX-Windows.zip
          upload-name: AnymeX-Windows-${{ github.ref_name }}.zip
          upload-to-folder-id: 1wQbVubcT2JvviSOyaoI7cDbHigkMcj2z
          service-account-json: "${{secrets.GOOGLE_KEY}}"
          overrwrite: true
      
      - name: Upload Windows Installer EXE to Google Drive
        id: gdriveUpload_windows_exe
        uses: hoatruongdev09/google-drive-file-upload-github-action@v1.1
        with:
          file-path: build/windows/x64/installer/Release/AnymeX-x86_64-2.9.2-Installer.exe
          upload-name: AnymeX-x86_64-${{ github.ref_name }}-Installer.exe
          upload-to-folder-id: 1wQbVubcT2JvviSOyaoI7cDbHigkMcj2z
          service-account-json: "${{secrets.GOOGLE_KEY}}"
          overrwrite: true


  build-macos:
    if: contains(github.event.head_commit.message, '[build]')
    runs-on: macos-latest
    outputs:
      macos_link: ${{ steps.gdriveUpload.outputs.web-content-link }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.24.0"

      - name: Setup .env File
        env:
          AL_CLIENT_ID: ${{ secrets.AL_CLIENT_ID }}
          AL_CLIENT_SECRET: ${{ secrets.AL_CLIENT_SECRET }}
          SIMKL_CLIENT_ID: ${{ secrets.SIMKL_CLIENT_ID }}
          SIMKL_CLIENT_SECRET: ${{ secrets.SIMKL_CLIENT_SECRET }}
          MAL_CLIENT_ID: ${{ secrets.MAL_CLIENT_ID }}
          MAL_CLIENT_SECRET: ${{ secrets.MAL_CLIENT_SECRET }}
          CALLBACK_SCHEME: ${{ secrets.CALLBACK_SCHEME }}
        run: |
          echo "AL_CLIENT_ID=$AL_CLIENT_ID" > .env
          echo "AL_CLIENT_SECRET=$AL_CLIENT_SECRET" >> .env
          echo "SIMKL_CLIENT_ID=$SIMKL_CLIENT_ID" >> .env
          echo "SIMKL_CLIENT_SECRET=$SIMKL_CLIENT_SECRET" >> .env
          echo "MAL_CLIENT_ID=$MAL_CLIENT_ID" >> .env
          echo "MAL_CLIENT_SECRET=$MAL_CLIENT_SECRET" >> .env
          echo "CALLBACK_SCHEME=$CALLBACK_SCHEME" >> .env

      - name: Get Dependencies
        run: flutter pub get

      - name: Build macOS
        run: flutter build macos --release

      - name: Create DMG file for macOS Build
        run: |
          mkdir -p build/macos/Release
          hdiutil create -volname "AnymeX" -srcfolder build/macos/Build/Products/Release/AnymeX.app -ov -format UDZO build/macos/Release/AnymeX.dmg
      
      - name: Upload macOS DMG to Google Drive
        id: gdriveUpload_macos
        uses: hoatruongdev09/google-drive-file-upload-github-action@v1.1
        with:
          file-path: build/macos/Release/AnymeX.dmg
          upload-name: AnymeX-macOS-${{ github.ref_name }}.dmg
          upload-to-folder-id: 1mVoJgft40o6SW6otWVBelkMlJdyimHp5
          service-account-json: "${{secrets.GOOGLE_KEY}}"
          overrwrite: true

  sendMessage:
    runs-on: ubuntu-latest
    needs: [build-android, build-ios, build-linux, build-windows, build-macos]
    steps:
      - name: Cloing repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download last SHA artifact
        uses: dawidd6/action-download-artifact@v6
        with:
          workflow: dart.yml
          name: last-shaa
        continue-on-error: true

      - name: Get Commits Since Last Run
        run: |
          if [ -f last_sha.txt ]; then
            LAST_SHA=$(cat last_sha.txt)
          else
            # Fallback to first commit if no previous SHA available
            LAST_SHA=$(git rev-list --max-parents=0 HEAD)
          fi
          echo "Commits since $LAST_SHA:"
          # Accumulate commit logs in a shell variable
          COMMIT_LOGS=$(git log $LAST_SHA..HEAD --pretty=format:"● %s ~%an [֍](https://github.com/${{ github.repository }}/commit/%H)" --max-count=10)
          # URL-encode the newline characters for GitHub Actions
          COMMIT_LOGS="${COMMIT_LOGS//'%'/'%25'}"
          COMMIT_LOGS="${COMMIT_LOGS//$'\n'/'%0A'}"
          COMMIT_LOGS="${COMMIT_LOGS//$'\r'/'%0D'}"
          # Append the encoded commit logs to the COMMIT_LOG environment variable
          echo "COMMIT_LOG=${COMMIT_LOGS}" >> $GITHUB_ENV
          # Debugging: Print the variable to check its content
          echo "$COMMIT_LOGS"
          echo "$COMMIT_LOGS" > commit_log.txt
          # Extract branch name from github.ref
          BRANCH=${{ github.ref }}
          BRANCH=${BRANCH#refs/heads/}
          echo "BRANCH=${BRANCH}" >> $GITHUB_ENV
        shell: /usr/bin/bash -e {0}
        env:
          CI: true
        continue-on-error: true

      - name: Save Current SHA for Next Run
        run: echo ${{ github.sha }} > last_sha.txt

      - name: Upload APK to Discord and Telegram
        shell: bash
        run: |
          # Truncate field values
          max_length=1024
          commit_messages=$(echo "$COMMIT_LOG" | sed 's/%0A/\n/g; s/^/\n/')
          if [ ${#commit_messages} -gt $max_length ]; then
            commit_messages="${commit_messages:0:$max_length}"
          fi
          
          # Set default values if variables are empty
          : "${ping_variable:=<@&1313089691523878942>}"
          : "${commit_messages:=No commits available.}"
          : "${VERSION:=beta}"
          : "${embed_color:=16711680}"  # Default red color

          # Construct Discord payload
          discord_data=$(jq -nc \
                            --arg content "$ping_variable" \
                            --arg field_value "$commit_messages" \
                            --arg footer_text "Version $VERSION" \
                            --arg timestamp "$(date -u +%Y-%m-%dT%H:%M:%S.000Z)" \
                            --arg thumbnail_url "${thumbnail_url:-https://cdn.discordapp.com/icons/1303000390505336893/d5c4b7afadec08e4c03e89cf997b5f6a.png}" \
                            --arg embed_color "$embed_color" \
                            '{
                              "content": $content,
                              "embeds": [
                                {
                                  "title": "New Alpha-Build dropped 🔥",
                                  "color": ($embed_color | tonumber),
                                  "fields": [
                                    {
                                      "name": "Commits:",
                                      "value": $field_value,
                                      "inline": true
                                    }
                                  ],
                                  "footer": {
                                    "text": $footer_text
                                  },
                                  "timestamp": $timestamp,
                                  "thumbnail": {
                                    "url": $thumbnail_url
                                  }
                                }
                              ],
                              "attachments": []
                            }')
          echo "Debug: Final Discord payload is:"
          echo "$discord_data"
          # Send Discord message
          curl -H "Content-Type: application/json" \
              -d "$discord_data" \
              ${{ secrets.DISCORD_WEBHOOK }}

          # Format commit messages for Telegram
          telegram_commit_messages=$(echo "$COMMIT_LOG" | sed 's/%0A/\n/g' | while read -r line; do
              message=$(echo "$line" | sed -E 's/● (.*) ~(.*) \[֍\]\((.*)\)/● \1 ~\2 <a href="\3">֍<\/a>/')
              message=$(echo "$message" | sed -E 's/\[#([0-9]+)\]\((https:\/\/github\.com\/[^)]+)\)/<a href="\2">#\1<\/a>/g')
              echo "$message"
          done)
          telegram_commit_messages="<blockquote>${telegram_commit_messages}</blockquote>"
          echo "$telegram_commit_messages"

          # Upload APK to Telegram
          response=$(curl -sS -f -X POST \
              "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
              -d "chat_id=${{ secrets.TELEGRAM_CHAT_ID }}" \
              -d "message_thread_id=${{ secrets.TELEGRAM_THREAD_ID }}" \
              -d "text=New Alpha-Build dropped 🔥
              
          Commits:
          ${telegram_commit_messages}
          Version: $VERSION" \
              -d "parse_mode=HTML" \
              -d "disable_web_page_preview=true")
    
      - name: Upload Current SHA as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: last-sha
          path: last_sha.txt
          
      - name: Send Discord Notification with Download Links
        env:
          ANDROID_LINK: ${{ needs.build-android.outputs.android_link }}
          WINDOWS_LINK: ${{ needs.build-windows.outputs.windows_link }}
          LINUX_LINK: ${{ needs.build-linux.outputs.linux_link }}
          IOS_LINK: ${{ needs.build-ios.outputs.ios_link }}
          MACOS_LINK: ${{ needs.build-macos.outputs.macos_link }}
        run: |
          ANDROID_MESSAGE="[Download Android]($ANDROID_LINK)"
          WINDOWS_MESSAGE="[Download Windows]($WINDOWS_LINK)"
          LINUX_MESSAGE="[Download Linux]($LINUX_LINK)"
          IOS_MESSAGE="[Download iOS]($IOS_LINK)"
          MACOS_MESSAGE="[Download macOS]($MACOS_LINK)"

          echo "android_message=$ANDROID_MESSAGE" >> $GITHUB_ENV
          echo "windows_message=$WINDOWS_MESSAGE" >> $GITHUB_ENV
          echo "linux_message=$LINUX_MESSAGE" >> $GITHUB_ENV
          echo "ios_message=$IOS_MESSAGE" >> $GITHUB_ENV
          echo "macos_message=$MACOS_MESSAGE" >> $GITHUB_ENV

          curl -H "Content-Type: application/json" \
               -d "{\"content\": \"${ANDROID_MESSAGE}\n${WINDOWS_MESSAGE}\n${LINUX_MESSAGE}\n${IOS_MESSAGE}\n${MACOS_MESSAGE}\"}" \
               "${{ secrets.DISCORD_WEBHOOK }}"

      - name: Send Telegram Notification
        run: |
          curl -sS -f -X POST \
              "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
              -F "chat_id=${{ secrets.TELEGRAM_CHAT_ID }}" \
              -F "message_thread_id=${{ secrets.TELEGRAM_THREAD_ID }}" \
              -F parse_mode="Markdown" \
              -F disable_notification=true \
              -F "text=🎉 *Build Notification* 🎉
            ${{ env.android_message }}
            ${{ env.windows_message }}
            ${{ env.linux_message }}
            ${{ env.ios_message }}
            ${{ env.macos_message }}"
