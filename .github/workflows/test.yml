name: Build and Release AnymeX (Beta) 

on:
  push:
    branches:
      - beta
  workflow_dispatch:

jobs:
  sendMessage:
    runs-on: ubuntu-latest
    #needs: [build-android, build-ios, build-linux, build-windows, build-macos]
    steps:
      - name: Cloing repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download last SHA artifact
        uses: dawidd6/action-download-artifact@v6
        with:
          workflow: dart.yml
          name: last-shaa
        continue-on-error: true

      - name: Get Commits Since Last Run
        run: |
          if [ -f last_sha.txt ]; then
            LAST_SHA=$(cat last_sha.txt)
          else
            # Fallback to first commit if no previous SHA available
            LAST_SHA=$(git rev-list --max-parents=0 HEAD)
          fi
          echo "Commits since $LAST_SHA:"
          # Accumulate commit logs in a shell variable
          COMMIT_LOGS=$(git log $LAST_SHA..HEAD --pretty=format:"‚óè %s ~%an [÷ç](https://github.com/${{ github.repository }}/commit/%H)" --max-count=10)
          # URL-encode the newline characters for GitHub Actions
          COMMIT_LOGS="${COMMIT_LOGS//'%'/'%25'}"
          COMMIT_LOGS="${COMMIT_LOGS//$'\n'/'%0A'}"
          COMMIT_LOGS="${COMMIT_LOGS//$'\r'/'%0D'}"
          # Append the encoded commit logs to the COMMIT_LOG environment variable
          echo "COMMIT_LOG=${COMMIT_LOGS}" >> $GITHUB_ENV
          # Debugging: Print the variable to check its content
          echo "$COMMIT_LOGS"
          echo "$COMMIT_LOGS" > commit_log.txt
          # Extract branch name from github.ref
          BRANCH=${{ github.ref }}
          BRANCH=${BRANCH#refs/heads/}
          echo "BRANCH=${BRANCH}" >> $GITHUB_ENV
        shell: /usr/bin/bash -e {0}
        env:
          CI: true
        continue-on-error: true

      - name: Save Current SHA for Next Run
        run: echo ${{ github.sha }} > last_sha.txt

      - name: Upload APK to Discord and Telegram
        shell: bash
        run: |
          # Truncate field values
          max_length=1024
          commit_messages=$(echo "$COMMIT_LOG" | sed 's/%0A/\n/g; s/^/\n/')
          if [ ${#commit_messages} -gt $max_length ]; then
            commit_messages="${commit_messages:0:$max_length}"
          fi
          
          # Set default values if variables are empty
          : "${ping_variable:=<@&1313089691523878942>}"
          : "${commit_messages:=No commits available.}"
          : "${VERSION:=beta}"
          : "${embed_color:=16711680}"  # Default red color

          # Construct Discord payload
          discord_data=$(jq -nc \
                            --arg content "$ping_variable" \
                            --arg field_value "$commit_messages" \
                            --arg footer_text "Version $VERSION" \
                            --arg timestamp "$(date -u +%Y-%m-%dT%H:%M:%S.000Z)" \
                            --arg thumbnail_url "${thumbnail_url:-https://cdn.discordapp.com/icons/1303000390505336893/d5c4b7afadec08e4c03e89cf997b5f6a.png}" \
                            --arg embed_color "$embed_color" \
                            '{
                              "content": $content,
                              "embeds": [
                                {
                                  "title": "New Alpha-Build dropped üî•",
                                  "color": ($embed_color | tonumber),
                                  "fields": [
                                    {
                                      "name": "Commits:",
                                      "value": $field_value,
                                      "inline": true
                                    }
                                  ],
                                  "footer": {
                                    "text": $footer_text
                                  },
                                  "timestamp": $timestamp,
                                  "thumbnail": {
                                    "url": $thumbnail_url
                                  }
                                }
                              ],
                              "attachments": []
                            }')
          echo "Debug: Final Discord payload is:"
          echo "$discord_data"
          # Send Discord message
          curl -H "Content-Type: application/json" \
              -d "$discord_data" \
              ${{ secrets.DISCORD_WEBHOOK }}

          # Format commit messages for Telegram
          telegram_commit_messages=$(echo "$COMMIT_LOG" | sed 's/%0A/\n/g' | while read -r line; do
              message=$(echo "$line" | sed -E 's/‚óè (.*) ~(.*) \[÷ç\]\((.*)\)/‚óè \1 ~\2 <a href="\3">÷ç<\/a>/')
              message=$(echo "$message" | sed -E 's/\[#([0-9]+)\]\((https:\/\/github\.com\/[^)]+)\)/<a href="\2">#\1<\/a>/g')
              echo "$message"
          done)
          telegram_commit_messages="<blockquote>${telegram_commit_messages}</blockquote>"
          echo "$telegram_commit_messages"

          echo "Debug: TELEGRAM_BOT_TOKEN='${{ secrets.TELEGRAM_BOT_TOKEN }}'"
          echo "Debug: TELEGRAM_CHAT_ID='${{ secrets.TELEGRAM_CHAT_ID }}'"
          echo "Debug: TELEGRAM_THREAD_ID='${{ secrets.TELEGRAM_THREAD_ID }}'"
          echo "Debug: VERSION='${VERSION}'"
          echo "Debug: Telegram Caption: $telegram_commit_messages"

          # Upload APK to Telegram
          response=$(curl -sS -f -X POST \
              "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendDocument" \
              -F "chat_id=${{ secrets.TELEGRAM_CHAT_ID }}" \
              -F "message_thread_id=${{secrets.TELEGRAM_THREAD_ID }}" \
              -F "caption=New Alpha-Build dropped üî•

          Commits:
          ${telegram_commit_messages}

          version: $VERSION" \
              -F "parse_mode=HTML")

      - name: Upload Current SHA as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: last-sha
          path: last_sha.txt
