name: Build (Beta) testing 

on:
  push:
    branches:
      - beta
  workflow_dispatch:

jobs:
  sendMessage:
    runs-on: ubuntu-latest
    #needs: [build-android, build-ios, build-linux, build-windows, build-macos]
    steps:
      - name: Cloning repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download last SHA artifact
        uses: dawidd6/action-download-artifact@v6
        with:
          workflow: test.yml
          name: last-sha
        continue-on-error: true

      - name: Get Commits Since Last Run
        run: |
          if [ -f last_sha.txt ]; then
            LAST_SHA=$(cat last_sha.txt)
          else
            LAST_SHA=$(git rev-list --max-parents=0 HEAD)
          fi
          echo "Commits since $LAST_SHA:"
          
          # Store commit logs in a file directly
          git log $LAST_SHA..HEAD --pretty=format:"* [%H](https://github.com/$GITHUB_REPOSITORY/commit/%H) : %s" > commit_log.txt
      
          # Encode and save the file content to GITHUB_ENV
          echo "COMMIT_LOG<<EOF" >> $GITHUB_ENV
          cat commit_log.txt >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

          # Extract branch name from github.ref
          BRANCH=${{ github.ref }}
          BRANCH=${BRANCH#refs/heads/}
          echo "BRANCH=${BRANCH}" >> $GITHUB_ENV
        shell: bash
        env:
          CI: true
        continue-on-error: true

      - name: Save Current SHA for Next Run
        run: echo ${{ github.sha }} > last_sha.txt

      - name: Send message to Discord
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_ALPHA }}
        run: |
          # Start with release header
          echo "**üöÄ New Release: Beta**" > header.txt
          
          # Extract all categories into separate files
          echo "**üöÄ Features**" > TFeatures.txt
          echo "$(echo "$COMMIT_LOG" | grep -iE '^\*\s\[[a-f0-9]+\]\(.*\):\sfeat' | head -n 5)" > feat.txt

          echo "**üêõ Fixes**" > TFixes.txt
          echo "$(echo "$COMMIT_LOG" | grep -iE '^\*\s\[[a-f0-9]+\]\(.*\):\s(fix|bug|improvement|patch)' | head -n 5)" > fixes.txt

          echo "**üîß Refactors**" > TRefactors.txt
          echo "$(echo "$COMMIT_LOG" | grep -iE '^\*\s\[[a-f0-9]+\]\(.*\):\srefactor' | head -n 5)" > refactors.txt

          echo "**üíÖ Style**" > TStyle.txt
          echo "$(echo "$COMMIT_LOG" | grep -iE '^\*\s\[[a-f0-9]+\]\(.*\):\sstyle' | head -n 5)" > style.txt

          echo "**‚ö° Performance**" > TPerformance.txt
          echo "$(echo "$COMMIT_LOG" | grep -iE '^\*\s\[[a-f0-9]+\]\(.*\):\sperf' | head -n 5)" > perf.txt

          echo "**üõ† Chores**" > TChores.txt
          echo "$(echo "$COMMIT_LOG" | grep -iE '^\*\s\[[a-f0-9]+\]\(.*\):\s(chore|docs|build|ci)' | head -n 5)" > chores.txt
        
          default_color="#1ac4c5"
          hex_to_decimal() { printf '%d' "0x${1#"#"}"; }
          embed_color=$(hex_to_decimal "$default_color")

          # Ensure VERSION is not empty
          VERSION=${VERSION:-"Beta"}
      
          discord_data=$(jq -nc \
                        --arg role_mention "<@&1313089691523878942>" \
                        --arg field_value "$(cat commit_log.txt)

            [‚ùìDon't know which version to download? Click here!](https://github.com/${{ github.repository }}/blob/main/INSTALLATION.md)" \
                        --arg footer_text "Version $VERSION" \
                        --arg timestamp "$(date -u +%Y-%m-%dT%H:%M:%S.000Z)" \
                        --argjson embed_color "$embed_color" \
                        '{
                          "content": $role_mention,
                          "embeds": [
                            {
                              "title": "üöÄ New Release: Beta",
                              "color": $embed_color,
                              "description": $field_value,
                              "footer": {
                                "text": $footer_text
                              },
                              "timestamp": $timestamp
                            }
                          ]
                        }')

          echo "Debug: Final Discord payload is: $discord_data"

          # Send the message to Discord using the webhook
          curl -H "Content-Type: application/json" \
              -X POST \
              -d "$discord_data" \
              "$DISCORD_WEBHOOK_URL"

      - name: Send message to Telegram
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          TELEGRAM_TOPIC: ${{ secrets.TELEGRAM_THREAD_ID }}
        run: |
          # Start with release header
          echo "<b>üöÄ New Release: Beta</b>" > header.txt

          # Combine categories into final output
          {
              cat header.txt
              echo ""
              [ -s feat.txt ] && echo -n "<blockquote>$(cat feat.txt)</blockquote> "
              [ -s fixes.txt ] && echo -n "<blockquote>$(cat fixes.txt)</blockquote> "
              [ -s refactors.txt ] && echo -n "<blockquote>$(cat refactors.txt)</blockquote> "
              [ -s style.txt ] && echo -n "<blockquote>$(cat style.txt)</blockquote> "
              [ -s perf.txt ] && echo -n "<blockquote>$(cat perf.txt)</blockquote> "
              [ -s chores.txt ] && echo -n "<blockquote>$(cat chores.txt)</blockquote> "
              echo ""
              echo "‚ùì<a href='https://github.com/${{ github.repository }}/blob/main/INSTALLATION.md'>Don't know which version to download? Click here!</a>"
          } > output.txt

          if [ ! -s output.txt ]; then
              echo "No commits found. Skipping Telegram message."
              exit 0
          fi

          markdown_info_tel=$(< output.txt)
          echo "Final Telegram Message:"
          echo "$markdown_info_tel"
          curl -s -X POST "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage" \
              -d "chat_id=$TELEGRAM_CHAT_ID" \
              -d "text=$markdown_info_tel" \
              -d "parse_mode=HTML" \
              -d "disable_web_page_preview=true"

      - name: Upload Current SHA as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: last-sha
          path: last_sha.txt

      - name: Send Discord Notification with Download Links
        env:
          ANDROID_ARM64_LINK: ${{ needs.build-android.outputs.arm64_link }}
          ANDROID_ARMEABI_LINK: ${{ needs.build-android.outputs.armeabi_link }}
          ANDROID_X86_LINK: ${{ needs.build-android.outputs.x86_link }}
          ANDROID_UNIVERSAL_LINK: ${{ needs.build-android.outputs.universal_link }}
          IOS_LINK: ${{ needs.build-ios.outputs.ios_link }}
          LINUX_ZIP_LINK: ${{ needs.build-linux.outputs.linux_zip_link }}
          LINUX_APPIMAGE_LINK: ${{ needs.build-linux.outputs.linux_appimage_link }}
          LINUX_RPM_LINK: ${{ needs.build-linux.outputs.linux_rpm_link }}
          WINDOWS_ZIP_LINK: ${{ needs.build-windows.outputs.windows_zip_link }}
          WINDOWS_EXE_LINK: ${{ needs.build-windows.outputs.windows_exe_link }}
          MACOS_LINK: ${{ needs.build-macos.outputs.macos_link }}
        run: |
          MESSAGE="Beta Released
      
          üîπ [Download]($ANDROID_ARM64_LINK) | **Android (arm64)**
          üîπ [Download]($ANDROID_ARMEABI_LINK) | **Android (armeabi-v7a)**
          üîπ [Download]($ANDROID_UNIVERSAL_LINK) | **Android (universal)**
          üîπ [Download]($ANDROID_X86_LINK) | **Android (x86 & x64)**
          üîπ [Download]($WINDOWS_ZIP_LINK) | **Windows ZIP**
          üîπ [Download]($WINDOWS_EXE_LINK) | **Windows EXE**
          üîπ [Download]($LINUX_ZIP_LINK) | **Linux ZIP**
          üîπ [Download]($LINUX_APPIMAGE_LINK) | **Linux AppImage**
          üîπ [Download]($LINUX_RPM_LINK) | **Linux RPM**
          üîπ [Download]($IOS_LINK) | **iOS**
          üîπ [Download]($MACOS_LINK) | **macOS**"

          # Send to Discord if the message is not empty
          if [[ -n "$MESSAGE" ]]; then
            curl -H "Content-Type: application/json" \
                 -d "{\"content\": \"$MESSAGE\"}" \
                 "${{ secrets.DISCORD_WEBHOOK_ALPHA }}"
          fi

      - name: Send Telegram Notification
        env:
          ANDROID_ARM64_LINK: ${{ needs.build-android.outputs.arm64_link }}
          ANDROID_ARMEABI_LINK: ${{ needs.build-android.outputs.armeabi_link }}
          ANDROID_X86_LINK: ${{ needs.build-android.outputs.x86_link }}
          ANDROID_UNIVERSAL_LINK: ${{ needs.build-android.outputs.universal_link }}
          IOS_LINK: ${{ needs.build-ios.outputs.ios_link }}
          LINUX_ZIP_LINK: ${{ needs.build-linux.outputs.linux_zip_link }}
          LINUX_APPIMAGE_LINK: ${{ needs.build-linux.outputs.linux_appimage_link }}
          LINUX_RPM_LINK: ${{ needs.build-linux.outputs.linux_rpm_link }}
          WINDOWS_ZIP_LINK: ${{ needs.build-windows.outputs.windows_zip_link }}
          WINDOWS_EXE_LINK: ${{ needs.build-windows.outputs.windows_exe_link }}
          MACOS_LINK: ${{ needs.build-macos.outputs.macos_link }}
        run: |
          TELEGRAM_MESSAGE="üéâ *Beta Released* üéâ
      
          üîπ [Download]($ANDROID_ARM64_LINK) | **Android (arm64)**
          üîπ [Download]($ANDROID_ARMEABI_LINK) | **Android (armeabi-v7a)**
          üîπ [Download]($ANDROID_UNIVERSAL_LINK) | **Android (universal)**
          üîπ [Download]($ANDROID_X86_LINK) | **Android (x86 & x64)**
          üîπ [Download]($WINDOWS_ZIP_LINK) | **Windows ZIP**
          üîπ [Download]($WINDOWS_EXE_LINK) | **Windows EXE**
          üîπ [Download]($LINUX_ZIP_LINK) | **Linux ZIP**
          üîπ [Download]($LINUX_APPIMAGE_LINK) | **Linux AppImage**
          üîπ [Download]($LINUX_RPM_LINK) | **Linux RPM**
          üîπ [Download]($IOS_LINK) | **iOS**
          üîπ [Download]($MACOS_LINK) | **macOS**"

          curl -sS -f -X POST \
              "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
              -F "chat_id=${{ secrets.TELEGRAM_CHAT_ID }}" \
              -F "message_thread_id=${{ secrets.TELEGRAM_THREAD_ID }}" \
              -F parse_mode="Markdown" \
              -F disable_notification=true \
              -F "text=$TELEGRAM_MESSAGE"
              
