name: changelog

on:
  workflow_run:
    workflows:
      - "Build and Release AnymeX"
    types:
      - completed
  workflow_dispatch:
    inputs:
      previous_tag:
        description: 'Previous tag to compare against (optional, defaults to second most recent distinct tag)'
        required: false
      current_tag:
        description: 'Current tag to generate changelog for (optional, defaults to latest tag)'
        required: false

jobs:
  generate-changelog:
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Clear CHANGELOG.md
        run: |
          echo "" > CHANGELOG.md

      - name: Fetch Tags
        id: fetch_tags
        run: |
          git fetch --tags
          TAGS=$(git tag --sort=-creatordate | tr '\n' ' ')
          echo "All tags: $TAGS"
          echo "tags=$TAGS" >> $GITHUB_ENV

      - name: Determine Tags for Comparison
        id: determine_tags
        run: |
          # Get current tag (from input or latest tag)
          if [ -n "${{ inputs.current_tag }}" ]; then
            CURRENT_TAG="${{ inputs.current_tag }}"
          else
            CURRENT_TAG=$(git describe --tags --abbrev=0)
          fi
          echo "Current tag: $CURRENT_TAG"
          echo "current_tag=$CURRENT_TAG" >> $GITHUB_ENV

          # Get all tags sorted by creation date (newest first)
          ALL_TAGS=(${{ env.tags }})
          PREV_TAG=""
          SECOND_PREV_TAG=""

          # Find the previous distinct tag
          for TAG in "${ALL_TAGS[@]}"; do
            if [ "$TAG" != "$CURRENT_TAG" ]; then
              if [ -z "$PREV_TAG" ]; then
                PREV_TAG="$TAG"
              elif [ -z "$SECOND_PREV_TAG" ]; then
                SECOND_PREV_TAG="$TAG"
                break
              fi
            fi
          done

          # Use input previous tag if provided, otherwise use determined previous tag
          if [ -n "${{ inputs.previous_tag }}" ]; then
            PREV_TAG="${{ inputs.previous_tag }}"
          elif [ "$PREV_TAG" == "$CURRENT_TAG" ] || [ -z "$PREV_TAG" ]; then
            PREV_TAG="$SECOND_PREV_TAG"
          fi

          # If no previous tag found, use initial commit
          if [ -z "$PREV_TAG" ]; then
            PREV_TAG=$(git rev-list --max-parents=0 HEAD)
          fi

          echo "Previous tag: $PREV_TAG"
          echo "prev_tag=$PREV_TAG" >> $GITHUB_ENV

      - name: Debug Commit Log
        run: |
          echo "Commits between ${{ env.prev_tag }} and ${{ env.current_tag }}:"
          git log ${{ env.prev_tag }}..${{ env.current_tag }} --pretty=format:'%h %s'

      - name: Get Commit Messages Between Tags
        id: get_commits
        run: |
          echo "Getting commit messages between ${{ env.prev_tag }} and ${{ env.current_tag }}..."
          COMMITS=$(git log ${{ env.prev_tag }}..${{ env.current_tag }} --pretty=format:'%h %s' | tr '\n' '|')
          echo "Commits retrieved: $COMMITS"
          echo "commits=$COMMITS" >> $GITHUB_ENV

      - name: Categorize Commits
        id: categorize
        run: |
          echo "Categorizing commits..."
          FEATURES=""
          BUG_FIXES=""
          REFACTORS=""
          STYLE_CHANGES=""
          PERFORMANCE=""
          CHORES=""
          REPO_URL="https://github.com/${{ github.repository }}"

          IFS='|' read -ra COMMIT_LIST <<< "${{ env.commits }}"
          for LINE in "${COMMIT_LIST[@]}"; do
            HASH=$(echo "$LINE" | awk '{print $1}')
            MESSAGE=$(echo "$LINE" | cut -d' ' -f2-)
            LINK="[$HASH]($REPO_URL/commit/$HASH)"
            FORMATTED_COMMIT="* $LINK: $MESSAGE"
            echo "Processing commit: $FORMATTED_COMMIT"
            if [[ $MESSAGE == feat* ]]; then
              FEATURES+="$FORMATTED_COMMIT\n"
            elif [[ $MESSAGE == fix* || $MESSAGE == bug* || $MESSAGE == improvement* || $MESSAGE == patch* ]]; then
              BUG_FIXES+="$FORMATTED_COMMIT\n"
            elif [[ $MESSAGE == refactor* ]]; then
              REFACTORS+="$FORMATTED_COMMIT\n"
            elif [[ $MESSAGE == style* ]]; then
              STYLE_CHANGES+="$FORMATTED_COMMIT\n"
            elif [[ $MESSAGE == perf* ]]; then
              PERFORMANCE+="$FORMATTED_COMMIT\n"
            elif [[ $MESSAGE == chore* || $MESSAGE == docs* || $MESSAGE == build* || $MESSAGE == ci* ]]; then
              CHORES+="$FORMATTED_COMMIT\n"
            fi
          done

          if [ -n "$FEATURES" ]; then
            echo "### 🎉 New Features" >> CHANGELOG.md
            echo -e "$FEATURES" >> CHANGELOG.md
          fi
          if [ -n "$BUG_FIXES" ]; then
            echo "### 🛠️ Bug Fixes & Improvements" >> CHANGELOG.md
            echo -e "$BUG_FIXES" >> CHANGELOG.md
          fi
          if [ -n "$REFACTORS" ]; then
            echo "### 🔧 Refactors" >> CHANGELOG.md
            echo -e "$REFACTORS" >> CHANGELOG.md
          fi
          if [ -n "$STYLE_CHANGES" ]; then
            echo "### 🎨 Style Changes" >> CHANGELOG.md
            echo -e "$STYLE_CHANGES" >> CHANGELOG.md
          fi
          if [ -n "$PERFORMANCE" ]; then
            echo "### 🚀 Performance Improvements" >> CHANGELOG.md
            echo -e "$PERFORMANCE" >> CHANGELOG.md
          fi
          if [ -n "$CHORES" ]; then
            echo "### 🧹 Chores & Documentation" >> CHANGELOG.md
            echo -e "$CHORES" >> CHANGELOG.md
          fi

      - name: Debug CHANGELOG.md
        run: cat CHANGELOG.md

      - name: Commit and Push Changelog
        run: |
          echo "Committing and pushing changelog..."
          git config --global user.name "Git Paneer"
          git config --global user.email "actions@github.com"
          git add CHANGELOG.md
          git commit --allow-empty -m "Update changelog for version ${{ env.current_tag }}"
          git push origin HEAD:main

      - name: Create or Update Release
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          bodyFile: CHANGELOG.md
          tag: ${{ env.current_tag }}
          allowUpdates: true
