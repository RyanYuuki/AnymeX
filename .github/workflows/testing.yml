name: Build (Beta) testing 

on:
  push:
    branches:
      - beta
  workflow_dispatch:

jobs:
  sendMessage:
    runs-on: ubuntu-latest
    #needs: [build-android, build-ios, build-linux, build-windows, build-macos]
    steps:
      - name: Cloning repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download last SHA artifact
        uses: dawidd6/action-download-artifact@v6
        with:
          workflow: testing.yml
          name: last-sha
        continue-on-error: true

      - name: Get Commits Since Last Run
        run: |
          if [ -f last_sha.txt ]; then
            LAST_SHA=$(cat last_sha.txt)
          else
            LAST_SHA=$(git rev-list --max-parents=0 HEAD)
          fi
      
          echo "Commits since $LAST_SHA:"
           COMMIT_LOG=$(git log $LAST_SHA..HEAD --pretty=format:"* [%H](https://github.com/Shebyyy/AnymeX/commit/%H) : %s")

          # Encode and save the file content to GITHUB_ENV
          {
            echo "COMMIT_LOG<<EOF"
            cat commit_log.txt
            echo "EOF"
          } >> "$GITHUB_ENV"
          
          # Create a new commit_logs.txt file
          echo "" > commit_logs.txt  # Clears the file before appending
                          
          # Extract all categories into separate files
          echo "**üöÄ Features**" > commit_logs.txt
          echo "$(echo "$COMMIT_LOG" | grep -iE '^\*\s\[[a-f0-9]+\]\(.*\):\sfeat' | sed -E 's/\): [^:]+:/) :/g' | head -n 5)" > commit_logs.txt
      
          echo "**üêõ Fixes**" > commit_logs.txt
          echo "$(echo "$COMMIT_LOG" | grep -iE '^\*\s\[[a-f0-9]+\]\(.*\):\s(fix|bug|improvement|patch)' | sed -E 's/\): [^:]+:/) :/g' | head -n 5)" > commit_logs.txt
      
          echo "**üîß Refactors**" > commit_logs.txt
          echo "$(echo "$COMMIT_LOG" | grep -iE '^\*\s\[[a-f0-9]+\]\(.*\):\srefactor' | sed -E 's/\): [^:]+:/) :/g' | head -n 5)" > commit_logs.txt
      
          echo "**üíÖ Style**" > commit_logs.txt
          echo "$(echo "$COMMIT_LOG" | grep -iE '^\*\s\[[a-f0-9]+\]\(.*\):\sstyle' | sed -E 's/\): [^:]+:/) :/g' | head -n 5)" > commit_logs.txt
      
          echo "**‚ö° Performance**" > commit_logs.txt
          echo "$(echo "$COMMIT_LOG" | grep -iE '^\*\s\[[a-f0-9]+\]\(.*\):\sperf' | sed -E 's/\): [^:]+:/) :/g' | head -n 5)" > commit_logs.txt
      
          echo "**üõ† Chores**" > commit_logs.txt
          echo "$(echo "$COMMIT_LOG" | grep -iE '^\*\s\[[a-f0-9]+\]\(.*\):\s(chore|docs|build|ci)' | sed -E 's/\): [^:]+:/) :/g' | head -n 5)" > commit_logs.txt
          
          # Encode and save the file content to GITHUB_ENV
          {
            echo "COMMIT_LOGS<<EOF"
            cat commit_logs.txt
            echo "EOF"
          } >> "$GITHUB_ENV"
          
          # Save branch name
          BRANCH="refs/heads/beta"
          BRANCH=${BRANCH#refs/heads/}
          echo "BRANCH=$BRANCH" >> $GITHUB_ENV

      - name: Send message to Discord
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_ALPHA }}
        run: |
        
          echo "**üöÄ New Release: Beta**" > header.txt
          echo "**üöÄ Features**" > TFeatures.txt
          echo "$(echo "$COMMIT_LOGS" | grep -iE '^\*\s\[[a-f0-9]+\]\(.*\):\sfeat' | sed -E 's/\): [^:]+:/) :/g' | head -n 5)" > feat.txt

          echo "**üêõ Fixes**" > TFixes.txt
          echo "$(echo "$COMMIT_LOGS" | grep -iE '^\*\s\[[a-f0-9]+\]\(.*\):\s(fix|bug|improvement|patch)' | sed -E 's/\): [^:]+:/) :/g' | head -n 5)" > fixes.txt

          default_color="#1ac4c5"
          hex_to_decimal() { printf '%d' "0x${1#"#"}"; }
          embed_color=$(hex_to_decimal "$default_color")

          VERSION=${VERSION:-"Beta"}
      
          discord_data=$(jq -nc \
                        --arg role_mention "<@&1313089691523878942>" \
                        --arg field_value "$COMMIT_LOGS

            [‚ùìDon't know which version to download? Click here!](https://github.com/${{ github.repository }}/blob/main/INSTALLATION.md)" \
                        --arg footer_text "Version $VERSION" \
                        --arg timestamp "$(date -u +%Y-%m-%dT%H:%M:%S.000Z)" \
                        --argjson embed_color "$embed_color" \
                        '{
                          "content": $role_mention,
                          "embeds": [
                            {
                              "title": "üöÄ New Release: ${{env.LATEST_TAG}}",
                              "color": $embed_color,
                              "description": $field_value,
                              "footer": {
                                "text": $footer_text
                              },
                              "timestamp": $timestamp
                            }
                          ]
                        }')

          echo "Debug: Final Discord payload is: $discord_data"

          curl -H "Content-Type: application/json" \
              -X POST \
              -d "$discord_data" \
              "$DISCORD_WEBHOOK_URL"

      - name: Send message to Telegram
        env:
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
          TELEGRAM_TOPIC: ${{ secrets.TELEGRAM_THREAD_ID }}
        run: |
          
          echo "<b>üöÄ New Release: Beta</b>" > header.txt
          
          echo "**üöÄ Features**" > TFeatures.txt
          echo "$(echo "$COMMIT_LOGS" | grep -iE '^\*\s\[[a-f0-9]+\]\(.*\):\sfeat' | sed -E 's/\): [^:]+:/) :/g' | head -n 5)" > feat.txt

          echo "**üêõ Fixes**" > TFixes.txt
          echo "$(echo "$COMMIT_LOGS" | grep -iE '^\*\s\[[a-f0-9]+\]\(.*\):\s(fix|bug|improvement|patch)' | sed -E 's/\): [^:]+:/) :/g' | head -n 5)" > fixes.txt

          # Combine categories into final output
          {
              cat header.txt
              echo ""
              [ -f TFeatures.txt ] && [ -f feat.txt ] && echo -n "$(cat TFeatures.txt) <blockquote>$(cat feat.txt)</blockquote> "
              [ -f TFixes.txt ] && [ -f fixes.txt ] && echo -n "$(cat TFixes.txt) <blockquote>$(cat fixes.txt)</blockquote> "
              echo ""
              echo "‚ùì<a href='https://github.com/${{ github.repository }}/blob/main/INSTALLATION.md'>Don't know which version to download? Click here!</a>"
              } > output.txt

          if [ ! -s output.txt ]; then
              echo "No commits found. Skipping Telegram message."
              exit 0
          fi
          markdown_info_tel=$(< output.txt)
          echo "Final Telegram Message:"
          echo "$markdown_info_tel"
          curl -s -X POST "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage" \
              -d "chat_id=$TELEGRAM_CHAT_ID" \
              -d "text=$markdown_info_tel" \
              -d "parse_mode=HTML" \
              -d "disable_web_page_preview=true"
      
      - name: Save Current SHA for Next Run
        run: echo ${{ github.sha }} > last_sha.txt

      - name: Upload Current SHA as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: last-sha
          path: last_sha.txt
