name: Test Platform Messaging

on:
  workflow_dispatch:  # Allows manual triggering

jobs:
  test-platform-messages:
    runs-on: ubuntu-latest
    
    steps:
      - name: Set random test links
        run: |
          echo "ANDROID_ARM64_LINK=https://example.com/android-arm64-v1.0.0.apk" >> $GITHUB_ENV
          echo "ANDROID_ARMEABI_LINK=https://example.com/android-armeabi-v7a-v1.0.0.apk" >> $GITHUB_ENV
          echo "ANDROID_UNIVERSAL_LINK=https://example.com/android-universal-v1.0.0.apk" >> $GITHUB_ENV
          echo "ANDROID_X86_LINK=https://example.com/android-x86-v1.0.0.apk" >> $GITHUB_ENV
          echo "WINDOWS_ZIP_LINK=https://example.com/windows-v1.0.0.zip" >> $GITHUB_ENV
          echo "WINDOWS_EXE_LINK=https://example.com/windows-v1.0.0.exe" >> $GITHUB_ENV
          echo "LINUX_ZIP_LINK=https://example.com/linux-v1.0.0.zip" >> $GITHUB_ENV
          echo "LINUX_APPIMAGE_LINK=https://example.com/linux-v1.0.0.AppImage" >> $GITHUB_ENV
          echo "LINUX_RPM_LINK=https://example.com/linux-v1.0.0.rpm" >> $GITHUB_ENV
          echo "IOS_LINK=https://example.com/ios-v1.0.0.ipa" >> $GITHUB_ENV
          echo "MACOS_LINK=https://example.com/macos-v1.0.0.dmg" >> $GITHUB_ENV
      
      - name: Create platform messages
        run: |
          # Set GitHub environment variables for different platform messages
          cat <<'EOF' >> $GITHUB_ENV
          apk_message=ðŸ”¹ [Download]($ANDROID_ARM64_LINK) | **Android (arm64)**
          ðŸ”¹ [Download]($ANDROID_ARMEABI_LINK) | **Android (armeabi-v7a)**
          ðŸ”¹ [Download]($ANDROID_UNIVERSAL_LINK) | **Android (universal)**
          ðŸ”¹ [Download]($ANDROID_X86_LINK) | **Android (x86 & x64)**
          EOF

          cat <<'EOF' >> $GITHUB_ENV
          windows_message=ðŸ”¹ [Download]($WINDOWS_ZIP_LINK) | **Windows ZIP**
          ðŸ”¹ [Download]($WINDOWS_EXE_LINK) | **Windows EXE**
          EOF

          cat <<'EOF' >> $GITHUB_ENV
          linux_message=ðŸ”¹ [Download]($LINUX_ZIP_LINK) | **Linux ZIP**
          ðŸ”¹ [Download]($LINUX_APPIMAGE_LINK) | **Linux AppImage**
          ðŸ”¹ [Download]($LINUX_RPM_LINK) | **Linux RPM**
          EOF

          cat <<'EOF' >> $GITHUB_ENV
          ios_message=ðŸ”¹ [Download]($IOS_LINK) | **iOS**
          EOF

          cat <<'EOF' >> $GITHUB_ENV
          macos_message=ðŸ”¹ [Download]($MACOS_LINK) | **macOS**
          EOF
      
      - name: Print composed message (testing only)
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_ALPHA }}
        run: |
          # Source environment variables to make them available in this step
          source $GITHUB_ENV
          
          # Create the complete message 
          FULL_MESSAGE="${apk_message}
          ${windows_message}
          ${linux_message}
          ${ios_message}
          ${macos_message}"
          
          # Print for testing
          echo "===== TEST MESSAGE ====="
          echo "$FULL_MESSAGE"
          echo "======================="
          
          # Only proceed with Discord if webhook is configured
          if [ -n "$DISCORD_WEBHOOK_URL" ]; then
            # Escape newlines for JSON
            DISCORD_MESSAGE=$(jq -Rs '.' <<<"$FULL_MESSAGE")
            
            # Send the Discord message
            curl -H "Content-Type: application/json" \
              -d "{\"content\": $DISCORD_MESSAGE}" \
              "$DISCORD_WEBHOOK_URL"
            
            echo "Message sent to Discord"
          else
            echo "Discord webhook not configured - skipping sending"
          fi
